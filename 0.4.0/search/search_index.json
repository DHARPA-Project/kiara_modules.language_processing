{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"kiara plugin: language_processing \u00b6 This package contains a set of commonly used/useful modules, pipelines, types and metadata schemas for Kiara . Description \u00b6 Language-processing kiara modules and data types. Package content \u00b6 module_types \u00b6 generate.LDA.for.tokens_array : Perform Latent Dirichlet Allocation on a tokenized corpus. tokenize.string : Tokenize a string. tokenize.texts_array : Split sentences into words or words into characters. remove_stopwords.from.tokens_array : Remove stopwords from an array of token-lists. operations \u00b6 generate.LDA.for.tokens_array : Perform Latent Dirichlet Allocation on a tokenized corpus. remove_stopwords.from.tokens_array : Remove stopwords from an array of token-lists. tokenize.string : Tokenize a string. tokenize.texts_array : Split sentences into words or words into characters. Links \u00b6 Documentation: https://DHARPA-Project.github.io/kiara_plugin.language_processing Code: https://github.com/DHARPA-Project/kiara_plugin.language_processing","title":"Home"},{"location":"#kiara-plugin-language_processing","text":"This package contains a set of commonly used/useful modules, pipelines, types and metadata schemas for Kiara .","title":"kiara plugin: language_processing"},{"location":"#description","text":"Language-processing kiara modules and data types.","title":"Description"},{"location":"#package-content","text":"","title":"Package content"},{"location":"#module_types","text":"generate.LDA.for.tokens_array : Perform Latent Dirichlet Allocation on a tokenized corpus. tokenize.string : Tokenize a string. tokenize.texts_array : Split sentences into words or words into characters. remove_stopwords.from.tokens_array : Remove stopwords from an array of token-lists.","title":"module_types"},{"location":"#operations","text":"generate.LDA.for.tokens_array : Perform Latent Dirichlet Allocation on a tokenized corpus. remove_stopwords.from.tokens_array : Remove stopwords from an array of token-lists. tokenize.string : Tokenize a string. tokenize.texts_array : Split sentences into words or words into characters.","title":"operations"},{"location":"#links","text":"Documentation: https://DHARPA-Project.github.io/kiara_plugin.language_processing Code: https://github.com/DHARPA-Project/kiara_plugin.language_processing","title":"Links"},{"location":"SUMMARY/","text":"Home Package contents Usage Development API reference","title":"SUMMARY"},{"location":"development/","text":"Development \u00b6 Prepare development environment \u00b6 Using conda (recommended) \u00b6 conda create -n language_processing python=3.9 conda activate language_processing conda install -c conda-forge mamba # this is optional, but makes everything install related much faster, if you don't use it, replace 'mamba' with 'conda' below mamba install -c conda-forge -c dharpa kiara mamba install -c conda-forge -c dharpa kiara_plugin.core_types kiara_plugin.tabular # optional, adjust which plugin packages you depend on, those two are quite common Using Python venv \u00b6 Later, alligator. Check out the source code \u00b6 First, fork the kiara_plugin.language_processing repository into your personal Github account. Then, use the resulting url (in my case: https://github.com/makkus/kiara_modules.language_processing.git) to clone the repository locally: https://github.com/<YOUR_FORKED_GITHUB_ID>/kiara_plugin.language_processing Install the kiara plugin package into it \u00b6 cd kiara_plugin.language_processing pip install -e '.[all_dev]' Here we use the -e option for the pip install command. This installs the local folder as a package in development mode into the current environment. Development mode makes it so that if you change any of the files in this folder, the Python environment will pick it up automatically, and whenever you run anything in this environment the latest version of your code/files are used. We also install a few additional requirements (the [all_dev] part in the command above) that are not strictly necessary for kiara itself, or this package, but help with various development-related tasks. Install some pre-commit check tooling (optional) \u00b6 This step is optional, but helps with keeping the code clean and CI from failing. By installing pre-commit hooks like here, whenever you do a git commit in this repo, a series of checks and cleanup tasks are run, until everything is in a state that will hopefully make Github Actions not complain when you push your changes. pre-commit install pre-commit install --hook-type commit-msg In addition to some Python-specific checks and cleanup tasks, this will also check your commit message so it's in line with the suggested format: https://www.conventionalcommits.org/en/v1.0.0/ Run kiara \u00b6 To check if everything works as expected and you can start adding/changing code in this repository, run any kiara command: kiara operation list -t language_processing If everything is set up correctly, the output of this command should contain a few operations that are implemented in this repository.","title":"Development"},{"location":"development/#development","text":"","title":"Development"},{"location":"development/#prepare-development-environment","text":"","title":"Prepare development environment"},{"location":"development/#using-conda-recommended","text":"conda create -n language_processing python=3.9 conda activate language_processing conda install -c conda-forge mamba # this is optional, but makes everything install related much faster, if you don't use it, replace 'mamba' with 'conda' below mamba install -c conda-forge -c dharpa kiara mamba install -c conda-forge -c dharpa kiara_plugin.core_types kiara_plugin.tabular # optional, adjust which plugin packages you depend on, those two are quite common","title":"Using conda (recommended)"},{"location":"development/#using-python-venv","text":"Later, alligator.","title":"Using Python venv"},{"location":"development/#check-out-the-source-code","text":"First, fork the kiara_plugin.language_processing repository into your personal Github account. Then, use the resulting url (in my case: https://github.com/makkus/kiara_modules.language_processing.git) to clone the repository locally: https://github.com/<YOUR_FORKED_GITHUB_ID>/kiara_plugin.language_processing","title":"Check out the source code"},{"location":"development/#install-the-kiara-plugin-package-into-it","text":"cd kiara_plugin.language_processing pip install -e '.[all_dev]' Here we use the -e option for the pip install command. This installs the local folder as a package in development mode into the current environment. Development mode makes it so that if you change any of the files in this folder, the Python environment will pick it up automatically, and whenever you run anything in this environment the latest version of your code/files are used. We also install a few additional requirements (the [all_dev] part in the command above) that are not strictly necessary for kiara itself, or this package, but help with various development-related tasks.","title":"Install the kiara plugin package into it"},{"location":"development/#install-some-pre-commit-check-tooling-optional","text":"This step is optional, but helps with keeping the code clean and CI from failing. By installing pre-commit hooks like here, whenever you do a git commit in this repo, a series of checks and cleanup tasks are run, until everything is in a state that will hopefully make Github Actions not complain when you push your changes. pre-commit install pre-commit install --hook-type commit-msg In addition to some Python-specific checks and cleanup tasks, this will also check your commit message so it's in line with the suggested format: https://www.conventionalcommits.org/en/v1.0.0/","title":"Install some pre-commit check tooling (optional)"},{"location":"development/#run-kiara","text":"To check if everything works as expected and you can start adding/changing code in this repository, run any kiara command: kiara operation list -t language_processing If everything is set up correctly, the output of this command should contain a few operations that are implemented in this repository.","title":"Run kiara"},{"location":"usage/","text":"Usage \u00b6 TO BE DONE","title":"Usage"},{"location":"usage/#usage","text":"TO BE DONE","title":"Usage"},{"location":"info/SUMMARY/","text":"module_types operations","title":"SUMMARY"},{"location":"info/module_types/","text":"generate.LDA.for.tokens_array \u00b6 Documentation Perform Latent Dirichlet Allocation on a tokenized corpus. This module computes models for a range of number of topics provided by the user. Author(s) Markus Binsteiner markus@frkl.io Context Tags language_processing, LDA, tokens Labels package : kiara_plugin.language_processing References source_repo : https://github.com/DHARPA-Project/kia\u2026 documentation : https://DHARPA-Project.github.io/kiar\u2026 Module config schema Field Type Descript\u2026 Required Default \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value no constants for this module. defaults object Value no defaults for this module. Python class python_class_name LDAModule python_module_name kiara_plugin.language_process\u2026 full_name kiara_plugin.language_process\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process (self, inputs: ValueMap, outputs: Value\u2026 from gensim import corpora logging . getLogger( \"gensim\" ) . setLevel(logging . E\u2026 tokens_array: KiaraArray = inputs . get_value_da\u2026 tokens = tokens_array . arrow_array . to_pylist() words_per_topic = inputs . get_value_data( \"words\u2026 num_topics_min = inputs . get_value_data( \"num_to\u2026 num_topics_max = inputs . get_value_data( \"num_to\u2026 if num_topics_max is None : num_topics_max = num_topics_min compute_coherence = inputs . get_value_data( \"com\u2026 id2word = corpora . Dictionary(tokens) corpus = [id2word . doc2bow(text) for text in to\u2026 # model = gensim.models.ldamulticore.LdaMultic\u2026 # corpus, id2word=id2word, num_topics=num_\u2026 # ) models = {} model_tables = {} coherence = {} # multi_threaded = False # if not multi_threaded: for nt in range(num_topics_min, num_topics_max\u2026 model = self . create_model(corpus = corpus, n\u2026 models[nt] = model topic_print_model = model . print_topics(num\u2026 # dbg(topic_print_model) # df = pd.DataFrame(topic_print_model, col\u2026 # TODO: create table directly # result_table = Table.from_pandas(df) model_tables[nt] = topic_print_model if compute_coherence: coherence_result = self . compute_cohere\u2026 model = model, corpus_model = tokens, \u2026 ) coherence[nt] = coherence_result # else: # def create_model(num_topics): # model = self.create_model(corpus=cor\u2026 # topic_print_model = model.print_topi\u2026 # df = pd.DataFrame(topic_print_model,\u2026 # # TODO: create table directly # result_table = Table.from_pandas(df) # coherence_result = None # if compute_coherence: # coherence_result = self.compute_\u2026 # return (num_topics, model, result_ta\u2026 # # executor = ThreadPoolExecutor() # results: typing.Any = executor.map(creat\u2026 # executor.shutdown(wait=True) # for r in results: # models[r[0]] = r[1] # model_tables[r[0]] = r[2] # if compute_coherence: # coherence[r[0]] = r[3] # df_coherence = pd.DataFrame(coherence.keys()\u2026 # df_coherence[\"Coherence\"] = coherence.values\u2026 if compute_coherence: coherence_table = self . assemble_coherence( models_dict = models, words_per_topic = wo\u2026 ) else : coherence_table = None outputs . set_values( topic_models = model_tables, coherence_table = coherence_table, coherence_map = coherence, ) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 tokenize.string \u00b6 Documentation Tokenize a string. Author(s) Markus Binsteiner markus@frkl.io Context Tags language_processing Labels package : kiara_plugin.language_processing References source_repo : https://github.com/DHARPA-Project/kia\u2026 documentation : https://DHARPA-Project.github.io/kiar\u2026 Module config schema Field Type Descript\u2026 Required Default \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constan\u2026 object Value no constants for this module. defaults object Value no defaults for this module. filter_\u2026 boolean Whether no true to filter out non alpha tokens. min_tok\u2026 integer The no 3 minimum token length. to_lowe\u2026 boolean Whether no true to lowercase the tokens. Python class python_class_name TokenizeTextModule python_module_name kiara_plugin.language_process\u2026 full_name kiara_plugin.language_process\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process (self, inputs: ValueMap, outputs: Value\u2026 import nltk # TODO: module-independent caching? # language = inputs.get_value_data(\"language\") # text = inputs . get_value_data( \"text\" ) tokenized = nltk . word_tokenize(text) result = tokenized if self . get_config_value( \"min_token_length\" ) > \u2026 result = ( x for x in tokenized if len(x) >= self . get_config_value( \"mi\u2026 ) if self . get_config_value( \"filter_non_alpha\" ): result = (x for x in result if x . isalpha()) if self . get_config_value( \"to_lowercase\" ): result = (x . lower() for x in result) outputs . set_value( \"token_list\" , list(result)) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 tokenize.texts_array \u00b6 Documentation Split sentences into words or words into characters. In other words, this operation establishes the word boundaries (i.e., tokens) a very helpful way of finding patterns. It is also the typical step prior to stemming and lemmatization Author(s) Markus Binsteiner markus@frkl.io Context Tags language_processing, tokenize, tokens Labels package : kiara_plugin.language_processing References source_repo : https://github.com/DHARPA-Project/kia\u2026 documentation : https://DHARPA-Project.github.io/kiar\u2026 Module config schema Field Type Descript\u2026 Required Default \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value no constants for this module. defaults object Value no defaults for this module. Python class python_class_name TokenizTextArrayeModule python_module_name kiara_plugin.language_process\u2026 full_name kiara_plugin.language_process\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process (self, inputs: ValueMap, outputs: Value\u2026 import warnings import nltk import numpy as np import pyarrow as pa import vaex array: KiaraArray = inputs . get_value_data( \"tex\u2026 # tokenize_by_word: bool = inputs.get_value_da\u2026 column: pa . Array = array . arrow_array warnings . filterwarnings( \"ignore\" , category = np . \u2026 def word_tokenize (word): result = nltk . word_tokenize(word) return result df = vaex . from_arrays(column = column) tokenized = df . apply(word_tokenize, arguments = \u2026 result_array = tokenized . to_arrow(convert_to_n\u2026 # TODO: remove this cast once the array data t\u2026 chunked = pa . chunked_array(result_array) outputs . set_values(tokens_array = chunked) # pandas_series: Series = column.to_pandas() # # tokenized = pandas_series.apply(lambda x: nl\u2026 # # result_array = pa.Array.from_pandas(tokenize\u2026 # # outputs.set_values(tokens_array=result_array) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 remove_stopwords.from.tokens_array \u00b6 Documentation Remove stopwords from an array of token-lists. Author(s) Markus Binsteiner markus@frkl.io Context Tags language_processing Labels package : kiara_plugin.language_processing References source_repo : https://github.com/DHARPA-Project/kia\u2026 documentation : https://DHARPA-Project.github.io/kiar\u2026 Module config schema Field Type Descript\u2026 Required Default \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value no constants for this module. defaults object Value no defaults for this module. Python class python_class_name RemoveStopwordsModule python_module_name kiara_plugin.language_process\u2026 full_name kiara_plugin.language_process\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process (self, inputs: ValueMap, outputs: Value\u2026 import pyarrow as pa custom_stopwords = inputs . get_value_data( \"addi\u2026 languages = inputs . get_value_data( \"languages\" ) if isinstance(languages, str): languages = [languages] stopwords = set() if languages: for language in languages: if language not in get_stopwords() . fil\u2026 raise KiaraProcessingException( f\"Invalid language: { language }\u2026 ) stopwords . update(get_stopwords() . words\u2026 if custom_stopwords: stopwords . update(custom_stopwords) if not stopwords: outputs . set_value( \"token_list\" , inputs . get\u2026 return token_lists = inputs . get_value_data( \"token_lis\u2026 if hasattr(token_lists, \"to_pylist\" ): token_lists = token_lists . to_pylist() result = [] for token_list in token_lists: cleaned_list = [x for x in token_list if x\u2026 result . append(cleaned_list) outputs . set_value( \"token_list\" , pa . array(resul\u2026 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500","title":"module_types"},{"location":"info/module_types/#kiara_info.module_types.generate.LDA.for.tokens_array","text":"Documentation Perform Latent Dirichlet Allocation on a tokenized corpus. This module computes models for a range of number of topics provided by the user. Author(s) Markus Binsteiner markus@frkl.io Context Tags language_processing, LDA, tokens Labels package : kiara_plugin.language_processing References source_repo : https://github.com/DHARPA-Project/kia\u2026 documentation : https://DHARPA-Project.github.io/kiar\u2026 Module config schema Field Type Descript\u2026 Required Default \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value no constants for this module. defaults object Value no defaults for this module. Python class python_class_name LDAModule python_module_name kiara_plugin.language_process\u2026 full_name kiara_plugin.language_process\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process (self, inputs: ValueMap, outputs: Value\u2026 from gensim import corpora logging . getLogger( \"gensim\" ) . setLevel(logging . E\u2026 tokens_array: KiaraArray = inputs . get_value_da\u2026 tokens = tokens_array . arrow_array . to_pylist() words_per_topic = inputs . get_value_data( \"words\u2026 num_topics_min = inputs . get_value_data( \"num_to\u2026 num_topics_max = inputs . get_value_data( \"num_to\u2026 if num_topics_max is None : num_topics_max = num_topics_min compute_coherence = inputs . get_value_data( \"com\u2026 id2word = corpora . Dictionary(tokens) corpus = [id2word . doc2bow(text) for text in to\u2026 # model = gensim.models.ldamulticore.LdaMultic\u2026 # corpus, id2word=id2word, num_topics=num_\u2026 # ) models = {} model_tables = {} coherence = {} # multi_threaded = False # if not multi_threaded: for nt in range(num_topics_min, num_topics_max\u2026 model = self . create_model(corpus = corpus, n\u2026 models[nt] = model topic_print_model = model . print_topics(num\u2026 # dbg(topic_print_model) # df = pd.DataFrame(topic_print_model, col\u2026 # TODO: create table directly # result_table = Table.from_pandas(df) model_tables[nt] = topic_print_model if compute_coherence: coherence_result = self . compute_cohere\u2026 model = model, corpus_model = tokens, \u2026 ) coherence[nt] = coherence_result # else: # def create_model(num_topics): # model = self.create_model(corpus=cor\u2026 # topic_print_model = model.print_topi\u2026 # df = pd.DataFrame(topic_print_model,\u2026 # # TODO: create table directly # result_table = Table.from_pandas(df) # coherence_result = None # if compute_coherence: # coherence_result = self.compute_\u2026 # return (num_topics, model, result_ta\u2026 # # executor = ThreadPoolExecutor() # results: typing.Any = executor.map(creat\u2026 # executor.shutdown(wait=True) # for r in results: # models[r[0]] = r[1] # model_tables[r[0]] = r[2] # if compute_coherence: # coherence[r[0]] = r[3] # df_coherence = pd.DataFrame(coherence.keys()\u2026 # df_coherence[\"Coherence\"] = coherence.values\u2026 if compute_coherence: coherence_table = self . assemble_coherence( models_dict = models, words_per_topic = wo\u2026 ) else : coherence_table = None outputs . set_values( topic_models = model_tables, coherence_table = coherence_table, coherence_map = coherence, ) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500","title":"generate.LDA.for.tokens_array"},{"location":"info/module_types/#kiara_info.module_types.tokenize.string","text":"Documentation Tokenize a string. Author(s) Markus Binsteiner markus@frkl.io Context Tags language_processing Labels package : kiara_plugin.language_processing References source_repo : https://github.com/DHARPA-Project/kia\u2026 documentation : https://DHARPA-Project.github.io/kiar\u2026 Module config schema Field Type Descript\u2026 Required Default \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constan\u2026 object Value no constants for this module. defaults object Value no defaults for this module. filter_\u2026 boolean Whether no true to filter out non alpha tokens. min_tok\u2026 integer The no 3 minimum token length. to_lowe\u2026 boolean Whether no true to lowercase the tokens. Python class python_class_name TokenizeTextModule python_module_name kiara_plugin.language_process\u2026 full_name kiara_plugin.language_process\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process (self, inputs: ValueMap, outputs: Value\u2026 import nltk # TODO: module-independent caching? # language = inputs.get_value_data(\"language\") # text = inputs . get_value_data( \"text\" ) tokenized = nltk . word_tokenize(text) result = tokenized if self . get_config_value( \"min_token_length\" ) > \u2026 result = ( x for x in tokenized if len(x) >= self . get_config_value( \"mi\u2026 ) if self . get_config_value( \"filter_non_alpha\" ): result = (x for x in result if x . isalpha()) if self . get_config_value( \"to_lowercase\" ): result = (x . lower() for x in result) outputs . set_value( \"token_list\" , list(result)) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500","title":"tokenize.string"},{"location":"info/module_types/#kiara_info.module_types.tokenize.texts_array","text":"Documentation Split sentences into words or words into characters. In other words, this operation establishes the word boundaries (i.e., tokens) a very helpful way of finding patterns. It is also the typical step prior to stemming and lemmatization Author(s) Markus Binsteiner markus@frkl.io Context Tags language_processing, tokenize, tokens Labels package : kiara_plugin.language_processing References source_repo : https://github.com/DHARPA-Project/kia\u2026 documentation : https://DHARPA-Project.github.io/kiar\u2026 Module config schema Field Type Descript\u2026 Required Default \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value no constants for this module. defaults object Value no defaults for this module. Python class python_class_name TokenizTextArrayeModule python_module_name kiara_plugin.language_process\u2026 full_name kiara_plugin.language_process\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process (self, inputs: ValueMap, outputs: Value\u2026 import warnings import nltk import numpy as np import pyarrow as pa import vaex array: KiaraArray = inputs . get_value_data( \"tex\u2026 # tokenize_by_word: bool = inputs.get_value_da\u2026 column: pa . Array = array . arrow_array warnings . filterwarnings( \"ignore\" , category = np . \u2026 def word_tokenize (word): result = nltk . word_tokenize(word) return result df = vaex . from_arrays(column = column) tokenized = df . apply(word_tokenize, arguments = \u2026 result_array = tokenized . to_arrow(convert_to_n\u2026 # TODO: remove this cast once the array data t\u2026 chunked = pa . chunked_array(result_array) outputs . set_values(tokens_array = chunked) # pandas_series: Series = column.to_pandas() # # tokenized = pandas_series.apply(lambda x: nl\u2026 # # result_array = pa.Array.from_pandas(tokenize\u2026 # # outputs.set_values(tokens_array=result_array) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500","title":"tokenize.texts_array"},{"location":"info/module_types/#kiara_info.module_types.remove_stopwords.from.tokens_array","text":"Documentation Remove stopwords from an array of token-lists. Author(s) Markus Binsteiner markus@frkl.io Context Tags language_processing Labels package : kiara_plugin.language_processing References source_repo : https://github.com/DHARPA-Project/kia\u2026 documentation : https://DHARPA-Project.github.io/kiar\u2026 Module config schema Field Type Descript\u2026 Required Default \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 constants object Value no constants for this module. defaults object Value no defaults for this module. Python class python_class_name RemoveStopwordsModule python_module_name kiara_plugin.language_process\u2026 full_name kiara_plugin.language_process\u2026 Processing source code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 def process (self, inputs: ValueMap, outputs: Value\u2026 import pyarrow as pa custom_stopwords = inputs . get_value_data( \"addi\u2026 languages = inputs . get_value_data( \"languages\" ) if isinstance(languages, str): languages = [languages] stopwords = set() if languages: for language in languages: if language not in get_stopwords() . fil\u2026 raise KiaraProcessingException( f\"Invalid language: { language }\u2026 ) stopwords . update(get_stopwords() . words\u2026 if custom_stopwords: stopwords . update(custom_stopwords) if not stopwords: outputs . set_value( \"token_list\" , inputs . get\u2026 return token_lists = inputs . get_value_data( \"token_lis\u2026 if hasattr(token_lists, \"to_pylist\" ): token_lists = token_lists . to_pylist() result = [] for token_list in token_lists: cleaned_list = [x for x in token_list if x\u2026 result . append(cleaned_list) outputs . set_value( \"token_list\" , pa . array(resul\u2026 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500","title":"remove_stopwords.from.tokens_array"},{"location":"info/operations/","text":"generate.LDA.for.tokens_array \u00b6 Documentation Perform Latent Dirichlet Allocation on a tokenized corpus. This module computes models for a range of number of topics provided by the user. Author(s) Markus Binsteiner markus@frkl.io Context Tags language_processing, LDA, tokens Labels package : kiara_plugin.language_processing References source_repo : https://github.com/DHARPA-Project/kiara_pl\u2026 documentation : https://DHARPA-Project.github.io/kiara_plu\u2026 Operation details Documentation Perform Latent Dirichlet Allocation on a tokenized corpus. This module computes models for a range of number of topics provided by the user. Inputs field name type desc\u2026 Requ\u2026 Def\u2026 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 toke\u2026 array The yes -- text no corp\u2026 def\u2026 -- num_\u2026 inte\u2026 The no 7 mini\u2026 numb\u2026 of topi\u2026 num_\u2026 inte\u2026 The no -- max no numb\u2026 def\u2026 of -- topi\u2026 comp\u2026 bool\u2026 Whet\u2026 no Fal\u2026 to comp\u2026 the cohe\u2026 score for each mode\u2026 word\u2026 inte\u2026 How no 10 many words per topic to put in the resu\u2026 mode\u2026 Outputs field name type description \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 topic_models dict A dictionary with one coherence model table for each number of topics. coherence_ta\u2026 table Coherence details. coherence_map dict A map with the coherence value for every number of topics. remove_stopwords.from.tokens_array \u00b6 Documentation Remove stopwords from an array of token-lists. Author(s) Markus Binsteiner markus@frkl.io Context Tags language_processing Labels package : kiara_plugin.language_processing References source_repo : https://github.com/DHARPA-Project/kiara_pl\u2026 documentation : https://DHARPA-Project.github.io/kiara_plu\u2026 Operation details Documentation Remove stopwords from an array of token-lists. Inputs field name type desc\u2026 Requ\u2026 Def\u2026 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 toke\u2026 array An yes -- array no of def\u2026 stri\u2026 -- lists (a list of toke\u2026 lang\u2026 list A no -- list no of def\u2026 lang\u2026 -- names to use defa\u2026 stop\u2026 lists for. addi\u2026 list A no -- list no of def\u2026 addi\u2026 -- cust\u2026 stop\u2026 Outputs field name type description \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 token_list array An array of string lists, with the stopwords removed. tokenize.string \u00b6 Documentation Tokenize a string. Author(s) Markus Binsteiner markus@frkl.io Context Tags language_processing Labels package : kiara_plugin.language_processing References source_repo : https://github.com/DHARPA-Project/kiara_pl\u2026 documentation : https://DHARPA-Project.github.io/kiara_plu\u2026 Operation details Documentation Tokenize a string. Inputs field name type desc\u2026 Req\u2026 Defa\u2026 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 text stri\u2026 The yes -- no text defa\u2026 to -- toke\u2026 Outputs field name type description \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 token_list list The tokenized version of the input text. tokenize.texts_array \u00b6 Documentation Split sentences into words or words into characters. In other words, this operation establishes the word boundaries (i.e., tokens) a very helpful way of finding patterns. It is also the typical step prior to stemming and lemmatization Author(s) Markus Binsteiner markus@frkl.io Context Tags language_processing, tokenize, tokens Labels package : kiara_plugin.language_processing References source_repo : https://github.com/DHARPA-Project/kiara_pl\u2026 documentation : https://DHARPA-Project.github.io/kiara_plu\u2026 Operation details Documentation Split sentences into words or words into characters. In other words, this operation establishes the word boundaries (i.e., tokens) a very helpful way of finding patterns. It is also the typical step prior to stemming and lemmatization Inputs field name type desc\u2026 Requ\u2026 Def\u2026 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 text\u2026 array An yes -- array no of def\u2026 text -- items to be toke\u2026 toke\u2026 bool\u2026 Whet\u2026 no True to toke\u2026 by word (def\u2026 or char\u2026 Outputs field name type description \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 tokens_array array The tokenized content, as an array of lists of strings.","title":"operations"},{"location":"info/operations/#kiara_info.operations.generate.LDA.for.tokens_array","text":"Documentation Perform Latent Dirichlet Allocation on a tokenized corpus. This module computes models for a range of number of topics provided by the user. Author(s) Markus Binsteiner markus@frkl.io Context Tags language_processing, LDA, tokens Labels package : kiara_plugin.language_processing References source_repo : https://github.com/DHARPA-Project/kiara_pl\u2026 documentation : https://DHARPA-Project.github.io/kiara_plu\u2026 Operation details Documentation Perform Latent Dirichlet Allocation on a tokenized corpus. This module computes models for a range of number of topics provided by the user. Inputs field name type desc\u2026 Requ\u2026 Def\u2026 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 toke\u2026 array The yes -- text no corp\u2026 def\u2026 -- num_\u2026 inte\u2026 The no 7 mini\u2026 numb\u2026 of topi\u2026 num_\u2026 inte\u2026 The no -- max no numb\u2026 def\u2026 of -- topi\u2026 comp\u2026 bool\u2026 Whet\u2026 no Fal\u2026 to comp\u2026 the cohe\u2026 score for each mode\u2026 word\u2026 inte\u2026 How no 10 many words per topic to put in the resu\u2026 mode\u2026 Outputs field name type description \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 topic_models dict A dictionary with one coherence model table for each number of topics. coherence_ta\u2026 table Coherence details. coherence_map dict A map with the coherence value for every number of topics.","title":"generate.LDA.for.tokens_array"},{"location":"info/operations/#kiara_info.operations.remove_stopwords.from.tokens_array","text":"Documentation Remove stopwords from an array of token-lists. Author(s) Markus Binsteiner markus@frkl.io Context Tags language_processing Labels package : kiara_plugin.language_processing References source_repo : https://github.com/DHARPA-Project/kiara_pl\u2026 documentation : https://DHARPA-Project.github.io/kiara_plu\u2026 Operation details Documentation Remove stopwords from an array of token-lists. Inputs field name type desc\u2026 Requ\u2026 Def\u2026 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 toke\u2026 array An yes -- array no of def\u2026 stri\u2026 -- lists (a list of toke\u2026 lang\u2026 list A no -- list no of def\u2026 lang\u2026 -- names to use defa\u2026 stop\u2026 lists for. addi\u2026 list A no -- list no of def\u2026 addi\u2026 -- cust\u2026 stop\u2026 Outputs field name type description \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 token_list array An array of string lists, with the stopwords removed.","title":"remove_stopwords.from.tokens_array"},{"location":"info/operations/#kiara_info.operations.tokenize.string","text":"Documentation Tokenize a string. Author(s) Markus Binsteiner markus@frkl.io Context Tags language_processing Labels package : kiara_plugin.language_processing References source_repo : https://github.com/DHARPA-Project/kiara_pl\u2026 documentation : https://DHARPA-Project.github.io/kiara_plu\u2026 Operation details Documentation Tokenize a string. Inputs field name type desc\u2026 Req\u2026 Defa\u2026 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 text stri\u2026 The yes -- no text defa\u2026 to -- toke\u2026 Outputs field name type description \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 token_list list The tokenized version of the input text.","title":"tokenize.string"},{"location":"info/operations/#kiara_info.operations.tokenize.texts_array","text":"Documentation Split sentences into words or words into characters. In other words, this operation establishes the word boundaries (i.e., tokens) a very helpful way of finding patterns. It is also the typical step prior to stemming and lemmatization Author(s) Markus Binsteiner markus@frkl.io Context Tags language_processing, tokenize, tokens Labels package : kiara_plugin.language_processing References source_repo : https://github.com/DHARPA-Project/kiara_pl\u2026 documentation : https://DHARPA-Project.github.io/kiara_plu\u2026 Operation details Documentation Split sentences into words or words into characters. In other words, this operation establishes the word boundaries (i.e., tokens) a very helpful way of finding patterns. It is also the typical step prior to stemming and lemmatization Inputs field name type desc\u2026 Requ\u2026 Def\u2026 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 text\u2026 array An yes -- array no of def\u2026 text -- items to be toke\u2026 toke\u2026 bool\u2026 Whet\u2026 no True to toke\u2026 by word (def\u2026 or char\u2026 Outputs field name type description \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 tokens_array array The tokenized content, as an array of lists of strings.","title":"tokenize.texts_array"},{"location":"reference/SUMMARY/","text":"kiara_plugin language_processing data_types language_processing lda lemmatize tokens models pipelines","title":"SUMMARY"},{"location":"reference/kiara_plugin/language_processing/__init__/","text":"Top-level package for kiara_plugin.language_processing. KIARA_METADATA \u00b6 find_data_types : Union [ Type , Tuple , Callable ] \u00b6 find_model_classes : Union [ Type , Tuple , Callable ] \u00b6 find_modules : Union [ Type , Tuple , Callable ] \u00b6 find_pipelines : Union [ Type , Tuple , Callable ] \u00b6 get_version () \u00b6 Source code in language_processing/__init__.py def get_version (): from pkg_resources import DistributionNotFound , get_distribution try : # Change here if project is renamed and does not equal the package name dist_name = __name__ __version__ = get_distribution ( dist_name ) . version except DistributionNotFound : try : version_file = os . path . join ( os . path . dirname ( __file__ ), \"version.txt\" ) if os . path . exists ( version_file ): with open ( version_file , encoding = \"utf-8\" ) as vf : __version__ = vf . read () else : __version__ = \"unknown\" except ( Exception ): pass if __version__ is None : __version__ = \"unknown\" return __version__ Modules \u00b6 data_types \u00b6 This module contains the value type classes that are used in the kiara_plugin.language_processing package. language_processing special \u00b6 Modules \u00b6 lda \u00b6 Classes \u00b6 LDAModule ( KiaraModule ) \u00b6 Perform Latent Dirichlet Allocation on a tokenized corpus. This module computes models for a range of number of topics provided by the user. Source code in language_processing/language_processing/lda.py class LDAModule ( KiaraModule ): \"\"\"Perform Latent Dirichlet Allocation on a tokenized corpus. This module computes models for a range of number of topics provided by the user. \"\"\" _module_type_name = \"generate.LDA.for.tokens_array\" KIARA_METADATA = { \"tags\" : [ \"LDA\" , \"tokens\" ], } def create_inputs_schema ( self , ) -> ValueSetSchema : inputs : Dict [ str , Dict [ str , Any ]] = { \"tokens_array\" : { \"type\" : \"array\" , \"doc\" : \"The text corpus.\" }, \"num_topics_min\" : { \"type\" : \"integer\" , \"doc\" : \"The minimal number of topics.\" , \"default\" : 7 , }, \"num_topics_max\" : { \"type\" : \"integer\" , \"doc\" : \"The max number of topics.\" , \"optional\" : True , }, \"compute_coherence\" : { \"type\" : \"boolean\" , \"doc\" : \"Whether to compute the coherence score for each model.\" , \"default\" : False , }, \"words_per_topic\" : { \"type\" : \"integer\" , \"doc\" : \"How many words per topic to put in the result model.\" , \"default\" : 10 , }, } return inputs def create_outputs_schema ( self , ) -> ValueSetSchema : outputs = { \"topic_models\" : { \"type\" : \"dict\" , \"doc\" : \"A dictionary with one coherence model table for each number of topics.\" , }, \"coherence_table\" : { \"type\" : \"table\" , \"doc\" : \"Coherence details.\" , \"optional\" : True , }, \"coherence_map\" : { \"type\" : \"dict\" , \"doc\" : \"A map with the coherence value for every number of topics.\" , }, } return outputs def create_model ( self , corpus , num_topics : int , id2word : Mapping [ str , int ]): from gensim.models import LdaModel model = LdaModel ( corpus , id2word = id2word , num_topics = num_topics , eval_every = None ) return model def compute_coherence ( self , model , corpus_model , id2word : Mapping [ str , int ]): from gensim.models import CoherenceModel coherencemodel = CoherenceModel ( model = model , texts = corpus_model , dictionary = id2word , coherence = \"c_v\" , processes = 1 , ) coherence_value = coherencemodel . get_coherence () return coherence_value def assemble_coherence ( self , models_dict : Mapping [ int , Any ], words_per_topic : int ): import pandas as pd import pyarrow as pa # Create list with topics and topic words for each number of topics num_topics_list = [] topics_list = [] for ( num_topics , model , ) in models_dict . items (): num_topics_list . append ( num_topics ) topic_print = model . print_topics ( num_words = words_per_topic ) topics_list . append ( topic_print ) df_coherence_table = pd . DataFrame ( columns = [ \"topic_id\" , \"words\" , \"num_topics\" ]) idx = 0 for i in range ( len ( topics_list )): for j in range ( len ( topics_list [ i ])): df_coherence_table . loc [ idx ] = \"\" df_coherence_table [ \"topic_id\" ] . loc [ idx ] = j + 1 df_coherence_table [ \"words\" ] . loc [ idx ] = \", \" . join ( re . findall ( r '\"(\\w+)\"' , topics_list [ i ][ j ][ 1 ]) ) df_coherence_table [ \"num_topics\" ] . loc [ idx ] = num_topics_list [ i ] idx += 1 coherence_table = pa . Table . from_pandas ( df_coherence_table , preserve_index = False ) return coherence_table def process ( self , inputs : ValueMap , outputs : ValueMap ) -> None : from gensim import corpora logging . getLogger ( \"gensim\" ) . setLevel ( logging . ERROR ) tokens_array : KiaraArray = inputs . get_value_data ( \"tokens_array\" ) tokens = tokens_array . arrow_array . to_pylist () words_per_topic = inputs . get_value_data ( \"words_per_topic\" ) num_topics_min = inputs . get_value_data ( \"num_topics_min\" ) num_topics_max = inputs . get_value_data ( \"num_topics_max\" ) if num_topics_max is None : num_topics_max = num_topics_min compute_coherence = inputs . get_value_data ( \"compute_coherence\" ) id2word = corpora . Dictionary ( tokens ) corpus = [ id2word . doc2bow ( text ) for text in tokens ] # model = gensim.models.ldamulticore.LdaMulticore( # corpus, id2word=id2word, num_topics=num_topics, eval_every=None # ) models = {} model_tables = {} coherence = {} # multi_threaded = False # if not multi_threaded: for nt in range ( num_topics_min , num_topics_max + 1 ): model = self . create_model ( corpus = corpus , num_topics = nt , id2word = id2word ) models [ nt ] = model topic_print_model = model . print_topics ( num_words = words_per_topic ) # dbg(topic_print_model) # df = pd.DataFrame(topic_print_model, columns=[\"topic_id\", \"words\"]) # TODO: create table directly # result_table = Table.from_pandas(df) model_tables [ nt ] = topic_print_model if compute_coherence : coherence_result = self . compute_coherence ( model = model , corpus_model = tokens , id2word = id2word ) coherence [ nt ] = coherence_result # else: # def create_model(num_topics): # model = self.create_model(corpus=corpus, num_topics=num_topics, id2word=id2word) # topic_print_model = model.print_topics(num_words=30) # df = pd.DataFrame(topic_print_model, columns=[\"topic_id\", \"words\"]) # # TODO: create table directly # result_table = Table.from_pandas(df) # coherence_result = None # if compute_coherence: # coherence_result = self.compute_coherence(model=model, corpus_model=tokens, id2word=id2word) # return (num_topics, model, result_table, coherence_result) # # executor = ThreadPoolExecutor() # results: typing.Any = executor.map(create_model, range(num_topics_min, num_topics_max+1)) # executor.shutdown(wait=True) # for r in results: # models[r[0]] = r[1] # model_tables[r[0]] = r[2] # if compute_coherence: # coherence[r[0]] = r[3] # df_coherence = pd.DataFrame(coherence.keys(), columns=[\"Number of topics\"]) # df_coherence[\"Coherence\"] = coherence.values() if compute_coherence : coherence_table = self . assemble_coherence ( models_dict = models , words_per_topic = words_per_topic ) else : coherence_table = None outputs . set_values ( topic_models = model_tables , coherence_table = coherence_table , coherence_map = coherence , ) KIARA_METADATA \u00b6 Methods \u00b6 assemble_coherence ( self , models_dict , words_per_topic ) \u00b6 Source code in language_processing/language_processing/lda.py def assemble_coherence ( self , models_dict : Mapping [ int , Any ], words_per_topic : int ): import pandas as pd import pyarrow as pa # Create list with topics and topic words for each number of topics num_topics_list = [] topics_list = [] for ( num_topics , model , ) in models_dict . items (): num_topics_list . append ( num_topics ) topic_print = model . print_topics ( num_words = words_per_topic ) topics_list . append ( topic_print ) df_coherence_table = pd . DataFrame ( columns = [ \"topic_id\" , \"words\" , \"num_topics\" ]) idx = 0 for i in range ( len ( topics_list )): for j in range ( len ( topics_list [ i ])): df_coherence_table . loc [ idx ] = \"\" df_coherence_table [ \"topic_id\" ] . loc [ idx ] = j + 1 df_coherence_table [ \"words\" ] . loc [ idx ] = \", \" . join ( re . findall ( r '\"(\\w+)\"' , topics_list [ i ][ j ][ 1 ]) ) df_coherence_table [ \"num_topics\" ] . loc [ idx ] = num_topics_list [ i ] idx += 1 coherence_table = pa . Table . from_pandas ( df_coherence_table , preserve_index = False ) return coherence_table compute_coherence ( self , model , corpus_model , id2word ) \u00b6 Source code in language_processing/language_processing/lda.py def compute_coherence ( self , model , corpus_model , id2word : Mapping [ str , int ]): from gensim.models import CoherenceModel coherencemodel = CoherenceModel ( model = model , texts = corpus_model , dictionary = id2word , coherence = \"c_v\" , processes = 1 , ) coherence_value = coherencemodel . get_coherence () return coherence_value create_inputs_schema ( self ) \u00b6 Return the schema for this types' inputs. Source code in language_processing/language_processing/lda.py def create_inputs_schema ( self , ) -> ValueSetSchema : inputs : Dict [ str , Dict [ str , Any ]] = { \"tokens_array\" : { \"type\" : \"array\" , \"doc\" : \"The text corpus.\" }, \"num_topics_min\" : { \"type\" : \"integer\" , \"doc\" : \"The minimal number of topics.\" , \"default\" : 7 , }, \"num_topics_max\" : { \"type\" : \"integer\" , \"doc\" : \"The max number of topics.\" , \"optional\" : True , }, \"compute_coherence\" : { \"type\" : \"boolean\" , \"doc\" : \"Whether to compute the coherence score for each model.\" , \"default\" : False , }, \"words_per_topic\" : { \"type\" : \"integer\" , \"doc\" : \"How many words per topic to put in the result model.\" , \"default\" : 10 , }, } return inputs create_model ( self , corpus , num_topics , id2word ) \u00b6 Source code in language_processing/language_processing/lda.py def create_model ( self , corpus , num_topics : int , id2word : Mapping [ str , int ]): from gensim.models import LdaModel model = LdaModel ( corpus , id2word = id2word , num_topics = num_topics , eval_every = None ) return model create_outputs_schema ( self ) \u00b6 Return the schema for this types' outputs. Source code in language_processing/language_processing/lda.py def create_outputs_schema ( self , ) -> ValueSetSchema : outputs = { \"topic_models\" : { \"type\" : \"dict\" , \"doc\" : \"A dictionary with one coherence model table for each number of topics.\" , }, \"coherence_table\" : { \"type\" : \"table\" , \"doc\" : \"Coherence details.\" , \"optional\" : True , }, \"coherence_map\" : { \"type\" : \"dict\" , \"doc\" : \"A map with the coherence value for every number of topics.\" , }, } return outputs process ( self , inputs , outputs ) \u00b6 Source code in language_processing/language_processing/lda.py def process ( self , inputs : ValueMap , outputs : ValueMap ) -> None : from gensim import corpora logging . getLogger ( \"gensim\" ) . setLevel ( logging . ERROR ) tokens_array : KiaraArray = inputs . get_value_data ( \"tokens_array\" ) tokens = tokens_array . arrow_array . to_pylist () words_per_topic = inputs . get_value_data ( \"words_per_topic\" ) num_topics_min = inputs . get_value_data ( \"num_topics_min\" ) num_topics_max = inputs . get_value_data ( \"num_topics_max\" ) if num_topics_max is None : num_topics_max = num_topics_min compute_coherence = inputs . get_value_data ( \"compute_coherence\" ) id2word = corpora . Dictionary ( tokens ) corpus = [ id2word . doc2bow ( text ) for text in tokens ] # model = gensim.models.ldamulticore.LdaMulticore( # corpus, id2word=id2word, num_topics=num_topics, eval_every=None # ) models = {} model_tables = {} coherence = {} # multi_threaded = False # if not multi_threaded: for nt in range ( num_topics_min , num_topics_max + 1 ): model = self . create_model ( corpus = corpus , num_topics = nt , id2word = id2word ) models [ nt ] = model topic_print_model = model . print_topics ( num_words = words_per_topic ) # dbg(topic_print_model) # df = pd.DataFrame(topic_print_model, columns=[\"topic_id\", \"words\"]) # TODO: create table directly # result_table = Table.from_pandas(df) model_tables [ nt ] = topic_print_model if compute_coherence : coherence_result = self . compute_coherence ( model = model , corpus_model = tokens , id2word = id2word ) coherence [ nt ] = coherence_result # else: # def create_model(num_topics): # model = self.create_model(corpus=corpus, num_topics=num_topics, id2word=id2word) # topic_print_model = model.print_topics(num_words=30) # df = pd.DataFrame(topic_print_model, columns=[\"topic_id\", \"words\"]) # # TODO: create table directly # result_table = Table.from_pandas(df) # coherence_result = None # if compute_coherence: # coherence_result = self.compute_coherence(model=model, corpus_model=tokens, id2word=id2word) # return (num_topics, model, result_table, coherence_result) # # executor = ThreadPoolExecutor() # results: typing.Any = executor.map(create_model, range(num_topics_min, num_topics_max+1)) # executor.shutdown(wait=True) # for r in results: # models[r[0]] = r[1] # model_tables[r[0]] = r[2] # if compute_coherence: # coherence[r[0]] = r[3] # df_coherence = pd.DataFrame(coherence.keys(), columns=[\"Number of topics\"]) # df_coherence[\"Coherence\"] = coherence.values() if compute_coherence : coherence_table = self . assemble_coherence ( models_dict = models , words_per_topic = words_per_topic ) else : coherence_table = None outputs . set_values ( topic_models = model_tables , coherence_table = coherence_table , coherence_map = coherence , ) lemmatize \u00b6 tokens \u00b6 Classes \u00b6 RemoveStopwordsModule ( KiaraModule ) \u00b6 Remove stopwords from an array of token-lists. Source code in language_processing/language_processing/tokens.py class RemoveStopwordsModule ( KiaraModule ): \"\"\"Remove stopwords from an array of token-lists.\"\"\" _module_type_name = \"remove_stopwords.from.tokens_array\" def create_inputs_schema ( self , ) -> ValueSetSchema : # TODO: do something smart and check whether languages are already downloaded, if so, display selection in doc inputs : Dict [ str , Dict [ str , Any ]] = { \"tokens_array\" : { \"type\" : \"array\" , \"doc\" : \"An array of string lists (a list of tokens).\" , }, \"languages\" : { \"type\" : \"list\" , # \"doc\": f\"A list of language names to use default stopword lists for. Available: {', '.join(get_stopwords().fileids())}.\", \"doc\" : \"A list of language names to use default stopword lists for.\" , \"optional\" : True , }, \"additional_stopwords\" : { \"type\" : \"list\" , \"doc\" : \"A list of additional, custom stopwords.\" , \"optional\" : True , }, } return inputs def create_outputs_schema ( self , ) -> ValueSetSchema : outputs = { \"token_list\" : { \"type\" : \"array\" , \"doc\" : \"An array of string lists, with the stopwords removed.\" , } } return outputs def process ( self , inputs : ValueMap , outputs : ValueMap ) -> None : import pyarrow as pa custom_stopwords = inputs . get_value_data ( \"additional_stopwords\" ) languages = inputs . get_value_data ( \"languages\" ) if isinstance ( languages , str ): languages = [ languages ] stopwords = set () if languages : for language in languages : if language not in get_stopwords () . fileids (): raise KiaraProcessingException ( f \"Invalid language: { language } . Available: { ', ' . join ( get_stopwords () . fileids ()) } .\" ) stopwords . update ( get_stopwords () . words ( language )) if custom_stopwords : stopwords . update ( custom_stopwords ) if not stopwords : outputs . set_value ( \"token_list\" , inputs . get_value_obj ( \"token_lists\" )) return token_lists = inputs . get_value_data ( \"token_lists\" ) if hasattr ( token_lists , \"to_pylist\" ): token_lists = token_lists . to_pylist () result = [] for token_list in token_lists : cleaned_list = [ x for x in token_list if x not in stopwords ] result . append ( cleaned_list ) outputs . set_value ( \"token_list\" , pa . array ( result )) Methods \u00b6 create_inputs_schema ( self ) \u00b6 Return the schema for this types' inputs. Source code in language_processing/language_processing/tokens.py def create_inputs_schema ( self , ) -> ValueSetSchema : # TODO: do something smart and check whether languages are already downloaded, if so, display selection in doc inputs : Dict [ str , Dict [ str , Any ]] = { \"tokens_array\" : { \"type\" : \"array\" , \"doc\" : \"An array of string lists (a list of tokens).\" , }, \"languages\" : { \"type\" : \"list\" , # \"doc\": f\"A list of language names to use default stopword lists for. Available: {', '.join(get_stopwords().fileids())}.\", \"doc\" : \"A list of language names to use default stopword lists for.\" , \"optional\" : True , }, \"additional_stopwords\" : { \"type\" : \"list\" , \"doc\" : \"A list of additional, custom stopwords.\" , \"optional\" : True , }, } return inputs create_outputs_schema ( self ) \u00b6 Return the schema for this types' outputs. Source code in language_processing/language_processing/tokens.py def create_outputs_schema ( self , ) -> ValueSetSchema : outputs = { \"token_list\" : { \"type\" : \"array\" , \"doc\" : \"An array of string lists, with the stopwords removed.\" , } } return outputs process ( self , inputs , outputs ) \u00b6 Source code in language_processing/language_processing/tokens.py def process ( self , inputs : ValueMap , outputs : ValueMap ) -> None : import pyarrow as pa custom_stopwords = inputs . get_value_data ( \"additional_stopwords\" ) languages = inputs . get_value_data ( \"languages\" ) if isinstance ( languages , str ): languages = [ languages ] stopwords = set () if languages : for language in languages : if language not in get_stopwords () . fileids (): raise KiaraProcessingException ( f \"Invalid language: { language } . Available: { ', ' . join ( get_stopwords () . fileids ()) } .\" ) stopwords . update ( get_stopwords () . words ( language )) if custom_stopwords : stopwords . update ( custom_stopwords ) if not stopwords : outputs . set_value ( \"token_list\" , inputs . get_value_obj ( \"token_lists\" )) return token_lists = inputs . get_value_data ( \"token_lists\" ) if hasattr ( token_lists , \"to_pylist\" ): token_lists = token_lists . to_pylist () result = [] for token_list in token_lists : cleaned_list = [ x for x in token_list if x not in stopwords ] result . append ( cleaned_list ) outputs . set_value ( \"token_list\" , pa . array ( result )) TokenizTextArrayeModule ( KiaraModule ) \u00b6 Split sentences into words or words into characters. In other words, this operation establishes the word boundaries (i.e., tokens) a very helpful way of finding patterns. It is also the typical step prior to stemming and lemmatization Source code in language_processing/language_processing/tokens.py class TokenizTextArrayeModule ( KiaraModule ): \"\"\"Split sentences into words or words into characters. In other words, this operation establishes the word boundaries (i.e., tokens) a very helpful way of finding patterns. It is also the typical step prior to stemming and lemmatization \"\"\" _module_type_name = \"tokenize.texts_array\" KIARA_METADATA = { \"tags\" : [ \"tokenize\" , \"tokens\" ], } def create_inputs_schema ( self , ) -> ValueSetSchema : return { \"texts_array\" : { \"type\" : \"array\" , \"doc\" : \"An array of text items to be tokenized.\" , }, \"tokenize_by_word\" : { \"type\" : \"boolean\" , \"doc\" : \"Whether to tokenize by word (default), or character.\" , \"default\" : True , }, } def create_outputs_schema ( self , ) -> ValueSetSchema : return { \"tokens_array\" : { \"type\" : \"array\" , \"doc\" : \"The tokenized content, as an array of lists of strings.\" , } } def process ( self , inputs : ValueMap , outputs : ValueMap ): import warnings import nltk import numpy as np import pyarrow as pa import vaex array : KiaraArray = inputs . get_value_data ( \"texts_array\" ) # tokenize_by_word: bool = inputs.get_value_data(\"tokenize_by_word\") column : pa . Array = array . arrow_array warnings . filterwarnings ( \"ignore\" , category = np . VisibleDeprecationWarning ) def word_tokenize ( word ): result = nltk . word_tokenize ( word ) return result df = vaex . from_arrays ( column = column ) tokenized = df . apply ( word_tokenize , arguments = [ df . column ]) result_array = tokenized . to_arrow ( convert_to_native = True ) # TODO: remove this cast once the array data type can handle non-chunked arrays chunked = pa . chunked_array ( result_array ) outputs . set_values ( tokens_array = chunked ) # pandas_series: Series = column.to_pandas() # # tokenized = pandas_series.apply(lambda x: nltk.word_tokenize(x)) # # result_array = pa.Array.from_pandas(tokenized) # # outputs.set_values(tokens_array=result_array) KIARA_METADATA \u00b6 Methods \u00b6 create_inputs_schema ( self ) \u00b6 Return the schema for this types' inputs. Source code in language_processing/language_processing/tokens.py def create_inputs_schema ( self , ) -> ValueSetSchema : return { \"texts_array\" : { \"type\" : \"array\" , \"doc\" : \"An array of text items to be tokenized.\" , }, \"tokenize_by_word\" : { \"type\" : \"boolean\" , \"doc\" : \"Whether to tokenize by word (default), or character.\" , \"default\" : True , }, } create_outputs_schema ( self ) \u00b6 Return the schema for this types' outputs. Source code in language_processing/language_processing/tokens.py def create_outputs_schema ( self , ) -> ValueSetSchema : return { \"tokens_array\" : { \"type\" : \"array\" , \"doc\" : \"The tokenized content, as an array of lists of strings.\" , } } process ( self , inputs , outputs ) \u00b6 Source code in language_processing/language_processing/tokens.py def process ( self , inputs : ValueMap , outputs : ValueMap ): import warnings import nltk import numpy as np import pyarrow as pa import vaex array : KiaraArray = inputs . get_value_data ( \"texts_array\" ) # tokenize_by_word: bool = inputs.get_value_data(\"tokenize_by_word\") column : pa . Array = array . arrow_array warnings . filterwarnings ( \"ignore\" , category = np . VisibleDeprecationWarning ) def word_tokenize ( word ): result = nltk . word_tokenize ( word ) return result df = vaex . from_arrays ( column = column ) tokenized = df . apply ( word_tokenize , arguments = [ df . column ]) result_array = tokenized . to_arrow ( convert_to_native = True ) # TODO: remove this cast once the array data type can handle non-chunked arrays chunked = pa . chunked_array ( result_array ) outputs . set_values ( tokens_array = chunked ) # pandas_series: Series = column.to_pandas() # # tokenized = pandas_series.apply(lambda x: nltk.word_tokenize(x)) # # result_array = pa.Array.from_pandas(tokenized) # # outputs.set_values(tokens_array=result_array) TokenizeTextConfig ( KiaraModuleConfig ) pydantic-model \u00b6 Source code in language_processing/language_processing/tokens.py class TokenizeTextConfig ( KiaraModuleConfig ): filter_non_alpha : bool = Field ( description = \"Whether to filter out non alpha tokens.\" , default = True ) min_token_length : int = Field ( description = \"The minimum token length.\" , default = 3 ) to_lowercase : bool = Field ( description = \"Whether to lowercase the tokens.\" , default = True ) Attributes \u00b6 filter_non_alpha : bool pydantic-field \u00b6 Whether to filter out non alpha tokens. min_token_length : int pydantic-field \u00b6 The minimum token length. to_lowercase : bool pydantic-field \u00b6 Whether to lowercase the tokens. TokenizeTextModule ( KiaraModule ) \u00b6 Tokenize a string. Source code in language_processing/language_processing/tokens.py class TokenizeTextModule ( KiaraModule ): \"\"\"Tokenize a string.\"\"\" _config_cls = TokenizeTextConfig _module_type_name = \"tokenize.string\" def create_inputs_schema ( self , ) -> ValueSetSchema : inputs = { \"text\" : { \"type\" : \"string\" , \"doc\" : \"The text to tokenize.\" }} return inputs def create_outputs_schema ( self , ) -> ValueSetSchema : outputs = { \"token_list\" : { \"type\" : \"list\" , \"doc\" : \"The tokenized version of the input text.\" , } } return outputs def process ( self , inputs : ValueMap , outputs : ValueMap ) -> None : import nltk # TODO: module-independent caching? # language = inputs.get_value_data(\"language\") # text = inputs . get_value_data ( \"text\" ) tokenized = nltk . word_tokenize ( text ) result = tokenized if self . get_config_value ( \"min_token_length\" ) > 0 : result = ( x for x in tokenized if len ( x ) >= self . get_config_value ( \"min_token_length\" ) ) if self . get_config_value ( \"filter_non_alpha\" ): result = ( x for x in result if x . isalpha ()) if self . get_config_value ( \"to_lowercase\" ): result = ( x . lower () for x in result ) outputs . set_value ( \"token_list\" , list ( result )) Classes \u00b6 _config_cls ( KiaraModuleConfig ) private pydantic-model \u00b6 Source code in language_processing/language_processing/tokens.py class TokenizeTextConfig ( KiaraModuleConfig ): filter_non_alpha : bool = Field ( description = \"Whether to filter out non alpha tokens.\" , default = True ) min_token_length : int = Field ( description = \"The minimum token length.\" , default = 3 ) to_lowercase : bool = Field ( description = \"Whether to lowercase the tokens.\" , default = True ) Attributes \u00b6 filter_non_alpha : bool pydantic-field \u00b6 Whether to filter out non alpha tokens. min_token_length : int pydantic-field \u00b6 The minimum token length. to_lowercase : bool pydantic-field \u00b6 Whether to lowercase the tokens. Methods \u00b6 create_inputs_schema ( self ) \u00b6 Return the schema for this types' inputs. Source code in language_processing/language_processing/tokens.py def create_inputs_schema ( self , ) -> ValueSetSchema : inputs = { \"text\" : { \"type\" : \"string\" , \"doc\" : \"The text to tokenize.\" }} return inputs create_outputs_schema ( self ) \u00b6 Return the schema for this types' outputs. Source code in language_processing/language_processing/tokens.py def create_outputs_schema ( self , ) -> ValueSetSchema : outputs = { \"token_list\" : { \"type\" : \"list\" , \"doc\" : \"The tokenized version of the input text.\" , } } return outputs process ( self , inputs , outputs ) \u00b6 Source code in language_processing/language_processing/tokens.py def process ( self , inputs : ValueMap , outputs : ValueMap ) -> None : import nltk # TODO: module-independent caching? # language = inputs.get_value_data(\"language\") # text = inputs . get_value_data ( \"text\" ) tokenized = nltk . word_tokenize ( text ) result = tokenized if self . get_config_value ( \"min_token_length\" ) > 0 : result = ( x for x in tokenized if len ( x ) >= self . get_config_value ( \"min_token_length\" ) ) if self . get_config_value ( \"filter_non_alpha\" ): result = ( x for x in result if x . isalpha ()) if self . get_config_value ( \"to_lowercase\" ): result = ( x . lower () for x in result ) outputs . set_value ( \"token_list\" , list ( result )) get_stopwords () \u00b6 Source code in language_processing/language_processing/tokens.py def get_stopwords (): # TODO: make that smarter pass import nltk nltk . download ( \"punkt\" ) nltk . download ( \"stopwords\" ) from nltk.corpus import stopwords return stopwords models \u00b6 This module contains the metadata (and other) models that are used in the kiara_plugin.language_processing package. Those models are convenience wrappers that make it easier for kiara to find, create, manage and version metadata -- but also other type of models -- that is attached to data, as well as kiara modules. Metadata models must be a sub-class of kiara.metadata.MetadataModel . Other models usually sub-class a pydantic BaseModel or implement custom base classes. pipelines special \u00b6 Default (empty) module that is used as a base path for pipelines contained in this package.","title":"language_processing"},{"location":"reference/kiara_plugin/language_processing/__init__/#kiara_plugin.language_processing.KIARA_METADATA","text":"","title":"KIARA_METADATA"},{"location":"reference/kiara_plugin/language_processing/__init__/#kiara_plugin.language_processing.find_data_types","text":"","title":"find_data_types"},{"location":"reference/kiara_plugin/language_processing/__init__/#kiara_plugin.language_processing.find_model_classes","text":"","title":"find_model_classes"},{"location":"reference/kiara_plugin/language_processing/__init__/#kiara_plugin.language_processing.find_modules","text":"","title":"find_modules"},{"location":"reference/kiara_plugin/language_processing/__init__/#kiara_plugin.language_processing.find_pipelines","text":"","title":"find_pipelines"},{"location":"reference/kiara_plugin/language_processing/__init__/#kiara_plugin.language_processing.get_version","text":"Source code in language_processing/__init__.py def get_version (): from pkg_resources import DistributionNotFound , get_distribution try : # Change here if project is renamed and does not equal the package name dist_name = __name__ __version__ = get_distribution ( dist_name ) . version except DistributionNotFound : try : version_file = os . path . join ( os . path . dirname ( __file__ ), \"version.txt\" ) if os . path . exists ( version_file ): with open ( version_file , encoding = \"utf-8\" ) as vf : __version__ = vf . read () else : __version__ = \"unknown\" except ( Exception ): pass if __version__ is None : __version__ = \"unknown\" return __version__","title":"get_version()"},{"location":"reference/kiara_plugin/language_processing/__init__/#kiara_plugin.language_processing-modules","text":"","title":"Modules"},{"location":"reference/kiara_plugin/language_processing/__init__/#kiara_plugin.language_processing.data_types","text":"This module contains the value type classes that are used in the kiara_plugin.language_processing package.","title":"data_types"},{"location":"reference/kiara_plugin/language_processing/__init__/#kiara_plugin.language_processing.language_processing","text":"","title":"language_processing"},{"location":"reference/kiara_plugin/language_processing/__init__/#kiara_plugin.language_processing.language_processing-modules","text":"","title":"Modules"},{"location":"reference/kiara_plugin/language_processing/__init__/#kiara_plugin.language_processing.language_processing.lda","text":"","title":"lda"},{"location":"reference/kiara_plugin/language_processing/__init__/#kiara_plugin.language_processing.language_processing.lda-classes","text":"LDAModule ( KiaraModule ) \u00b6 Perform Latent Dirichlet Allocation on a tokenized corpus. This module computes models for a range of number of topics provided by the user. Source code in language_processing/language_processing/lda.py class LDAModule ( KiaraModule ): \"\"\"Perform Latent Dirichlet Allocation on a tokenized corpus. This module computes models for a range of number of topics provided by the user. \"\"\" _module_type_name = \"generate.LDA.for.tokens_array\" KIARA_METADATA = { \"tags\" : [ \"LDA\" , \"tokens\" ], } def create_inputs_schema ( self , ) -> ValueSetSchema : inputs : Dict [ str , Dict [ str , Any ]] = { \"tokens_array\" : { \"type\" : \"array\" , \"doc\" : \"The text corpus.\" }, \"num_topics_min\" : { \"type\" : \"integer\" , \"doc\" : \"The minimal number of topics.\" , \"default\" : 7 , }, \"num_topics_max\" : { \"type\" : \"integer\" , \"doc\" : \"The max number of topics.\" , \"optional\" : True , }, \"compute_coherence\" : { \"type\" : \"boolean\" , \"doc\" : \"Whether to compute the coherence score for each model.\" , \"default\" : False , }, \"words_per_topic\" : { \"type\" : \"integer\" , \"doc\" : \"How many words per topic to put in the result model.\" , \"default\" : 10 , }, } return inputs def create_outputs_schema ( self , ) -> ValueSetSchema : outputs = { \"topic_models\" : { \"type\" : \"dict\" , \"doc\" : \"A dictionary with one coherence model table for each number of topics.\" , }, \"coherence_table\" : { \"type\" : \"table\" , \"doc\" : \"Coherence details.\" , \"optional\" : True , }, \"coherence_map\" : { \"type\" : \"dict\" , \"doc\" : \"A map with the coherence value for every number of topics.\" , }, } return outputs def create_model ( self , corpus , num_topics : int , id2word : Mapping [ str , int ]): from gensim.models import LdaModel model = LdaModel ( corpus , id2word = id2word , num_topics = num_topics , eval_every = None ) return model def compute_coherence ( self , model , corpus_model , id2word : Mapping [ str , int ]): from gensim.models import CoherenceModel coherencemodel = CoherenceModel ( model = model , texts = corpus_model , dictionary = id2word , coherence = \"c_v\" , processes = 1 , ) coherence_value = coherencemodel . get_coherence () return coherence_value def assemble_coherence ( self , models_dict : Mapping [ int , Any ], words_per_topic : int ): import pandas as pd import pyarrow as pa # Create list with topics and topic words for each number of topics num_topics_list = [] topics_list = [] for ( num_topics , model , ) in models_dict . items (): num_topics_list . append ( num_topics ) topic_print = model . print_topics ( num_words = words_per_topic ) topics_list . append ( topic_print ) df_coherence_table = pd . DataFrame ( columns = [ \"topic_id\" , \"words\" , \"num_topics\" ]) idx = 0 for i in range ( len ( topics_list )): for j in range ( len ( topics_list [ i ])): df_coherence_table . loc [ idx ] = \"\" df_coherence_table [ \"topic_id\" ] . loc [ idx ] = j + 1 df_coherence_table [ \"words\" ] . loc [ idx ] = \", \" . join ( re . findall ( r '\"(\\w+)\"' , topics_list [ i ][ j ][ 1 ]) ) df_coherence_table [ \"num_topics\" ] . loc [ idx ] = num_topics_list [ i ] idx += 1 coherence_table = pa . Table . from_pandas ( df_coherence_table , preserve_index = False ) return coherence_table def process ( self , inputs : ValueMap , outputs : ValueMap ) -> None : from gensim import corpora logging . getLogger ( \"gensim\" ) . setLevel ( logging . ERROR ) tokens_array : KiaraArray = inputs . get_value_data ( \"tokens_array\" ) tokens = tokens_array . arrow_array . to_pylist () words_per_topic = inputs . get_value_data ( \"words_per_topic\" ) num_topics_min = inputs . get_value_data ( \"num_topics_min\" ) num_topics_max = inputs . get_value_data ( \"num_topics_max\" ) if num_topics_max is None : num_topics_max = num_topics_min compute_coherence = inputs . get_value_data ( \"compute_coherence\" ) id2word = corpora . Dictionary ( tokens ) corpus = [ id2word . doc2bow ( text ) for text in tokens ] # model = gensim.models.ldamulticore.LdaMulticore( # corpus, id2word=id2word, num_topics=num_topics, eval_every=None # ) models = {} model_tables = {} coherence = {} # multi_threaded = False # if not multi_threaded: for nt in range ( num_topics_min , num_topics_max + 1 ): model = self . create_model ( corpus = corpus , num_topics = nt , id2word = id2word ) models [ nt ] = model topic_print_model = model . print_topics ( num_words = words_per_topic ) # dbg(topic_print_model) # df = pd.DataFrame(topic_print_model, columns=[\"topic_id\", \"words\"]) # TODO: create table directly # result_table = Table.from_pandas(df) model_tables [ nt ] = topic_print_model if compute_coherence : coherence_result = self . compute_coherence ( model = model , corpus_model = tokens , id2word = id2word ) coherence [ nt ] = coherence_result # else: # def create_model(num_topics): # model = self.create_model(corpus=corpus, num_topics=num_topics, id2word=id2word) # topic_print_model = model.print_topics(num_words=30) # df = pd.DataFrame(topic_print_model, columns=[\"topic_id\", \"words\"]) # # TODO: create table directly # result_table = Table.from_pandas(df) # coherence_result = None # if compute_coherence: # coherence_result = self.compute_coherence(model=model, corpus_model=tokens, id2word=id2word) # return (num_topics, model, result_table, coherence_result) # # executor = ThreadPoolExecutor() # results: typing.Any = executor.map(create_model, range(num_topics_min, num_topics_max+1)) # executor.shutdown(wait=True) # for r in results: # models[r[0]] = r[1] # model_tables[r[0]] = r[2] # if compute_coherence: # coherence[r[0]] = r[3] # df_coherence = pd.DataFrame(coherence.keys(), columns=[\"Number of topics\"]) # df_coherence[\"Coherence\"] = coherence.values() if compute_coherence : coherence_table = self . assemble_coherence ( models_dict = models , words_per_topic = words_per_topic ) else : coherence_table = None outputs . set_values ( topic_models = model_tables , coherence_table = coherence_table , coherence_map = coherence , ) KIARA_METADATA \u00b6 Methods \u00b6 assemble_coherence ( self , models_dict , words_per_topic ) \u00b6 Source code in language_processing/language_processing/lda.py def assemble_coherence ( self , models_dict : Mapping [ int , Any ], words_per_topic : int ): import pandas as pd import pyarrow as pa # Create list with topics and topic words for each number of topics num_topics_list = [] topics_list = [] for ( num_topics , model , ) in models_dict . items (): num_topics_list . append ( num_topics ) topic_print = model . print_topics ( num_words = words_per_topic ) topics_list . append ( topic_print ) df_coherence_table = pd . DataFrame ( columns = [ \"topic_id\" , \"words\" , \"num_topics\" ]) idx = 0 for i in range ( len ( topics_list )): for j in range ( len ( topics_list [ i ])): df_coherence_table . loc [ idx ] = \"\" df_coherence_table [ \"topic_id\" ] . loc [ idx ] = j + 1 df_coherence_table [ \"words\" ] . loc [ idx ] = \", \" . join ( re . findall ( r '\"(\\w+)\"' , topics_list [ i ][ j ][ 1 ]) ) df_coherence_table [ \"num_topics\" ] . loc [ idx ] = num_topics_list [ i ] idx += 1 coherence_table = pa . Table . from_pandas ( df_coherence_table , preserve_index = False ) return coherence_table compute_coherence ( self , model , corpus_model , id2word ) \u00b6 Source code in language_processing/language_processing/lda.py def compute_coherence ( self , model , corpus_model , id2word : Mapping [ str , int ]): from gensim.models import CoherenceModel coherencemodel = CoherenceModel ( model = model , texts = corpus_model , dictionary = id2word , coherence = \"c_v\" , processes = 1 , ) coherence_value = coherencemodel . get_coherence () return coherence_value create_inputs_schema ( self ) \u00b6 Return the schema for this types' inputs. Source code in language_processing/language_processing/lda.py def create_inputs_schema ( self , ) -> ValueSetSchema : inputs : Dict [ str , Dict [ str , Any ]] = { \"tokens_array\" : { \"type\" : \"array\" , \"doc\" : \"The text corpus.\" }, \"num_topics_min\" : { \"type\" : \"integer\" , \"doc\" : \"The minimal number of topics.\" , \"default\" : 7 , }, \"num_topics_max\" : { \"type\" : \"integer\" , \"doc\" : \"The max number of topics.\" , \"optional\" : True , }, \"compute_coherence\" : { \"type\" : \"boolean\" , \"doc\" : \"Whether to compute the coherence score for each model.\" , \"default\" : False , }, \"words_per_topic\" : { \"type\" : \"integer\" , \"doc\" : \"How many words per topic to put in the result model.\" , \"default\" : 10 , }, } return inputs create_model ( self , corpus , num_topics , id2word ) \u00b6 Source code in language_processing/language_processing/lda.py def create_model ( self , corpus , num_topics : int , id2word : Mapping [ str , int ]): from gensim.models import LdaModel model = LdaModel ( corpus , id2word = id2word , num_topics = num_topics , eval_every = None ) return model create_outputs_schema ( self ) \u00b6 Return the schema for this types' outputs. Source code in language_processing/language_processing/lda.py def create_outputs_schema ( self , ) -> ValueSetSchema : outputs = { \"topic_models\" : { \"type\" : \"dict\" , \"doc\" : \"A dictionary with one coherence model table for each number of topics.\" , }, \"coherence_table\" : { \"type\" : \"table\" , \"doc\" : \"Coherence details.\" , \"optional\" : True , }, \"coherence_map\" : { \"type\" : \"dict\" , \"doc\" : \"A map with the coherence value for every number of topics.\" , }, } return outputs process ( self , inputs , outputs ) \u00b6 Source code in language_processing/language_processing/lda.py def process ( self , inputs : ValueMap , outputs : ValueMap ) -> None : from gensim import corpora logging . getLogger ( \"gensim\" ) . setLevel ( logging . ERROR ) tokens_array : KiaraArray = inputs . get_value_data ( \"tokens_array\" ) tokens = tokens_array . arrow_array . to_pylist () words_per_topic = inputs . get_value_data ( \"words_per_topic\" ) num_topics_min = inputs . get_value_data ( \"num_topics_min\" ) num_topics_max = inputs . get_value_data ( \"num_topics_max\" ) if num_topics_max is None : num_topics_max = num_topics_min compute_coherence = inputs . get_value_data ( \"compute_coherence\" ) id2word = corpora . Dictionary ( tokens ) corpus = [ id2word . doc2bow ( text ) for text in tokens ] # model = gensim.models.ldamulticore.LdaMulticore( # corpus, id2word=id2word, num_topics=num_topics, eval_every=None # ) models = {} model_tables = {} coherence = {} # multi_threaded = False # if not multi_threaded: for nt in range ( num_topics_min , num_topics_max + 1 ): model = self . create_model ( corpus = corpus , num_topics = nt , id2word = id2word ) models [ nt ] = model topic_print_model = model . print_topics ( num_words = words_per_topic ) # dbg(topic_print_model) # df = pd.DataFrame(topic_print_model, columns=[\"topic_id\", \"words\"]) # TODO: create table directly # result_table = Table.from_pandas(df) model_tables [ nt ] = topic_print_model if compute_coherence : coherence_result = self . compute_coherence ( model = model , corpus_model = tokens , id2word = id2word ) coherence [ nt ] = coherence_result # else: # def create_model(num_topics): # model = self.create_model(corpus=corpus, num_topics=num_topics, id2word=id2word) # topic_print_model = model.print_topics(num_words=30) # df = pd.DataFrame(topic_print_model, columns=[\"topic_id\", \"words\"]) # # TODO: create table directly # result_table = Table.from_pandas(df) # coherence_result = None # if compute_coherence: # coherence_result = self.compute_coherence(model=model, corpus_model=tokens, id2word=id2word) # return (num_topics, model, result_table, coherence_result) # # executor = ThreadPoolExecutor() # results: typing.Any = executor.map(create_model, range(num_topics_min, num_topics_max+1)) # executor.shutdown(wait=True) # for r in results: # models[r[0]] = r[1] # model_tables[r[0]] = r[2] # if compute_coherence: # coherence[r[0]] = r[3] # df_coherence = pd.DataFrame(coherence.keys(), columns=[\"Number of topics\"]) # df_coherence[\"Coherence\"] = coherence.values() if compute_coherence : coherence_table = self . assemble_coherence ( models_dict = models , words_per_topic = words_per_topic ) else : coherence_table = None outputs . set_values ( topic_models = model_tables , coherence_table = coherence_table , coherence_map = coherence , )","title":"Classes"},{"location":"reference/kiara_plugin/language_processing/__init__/#kiara_plugin.language_processing.language_processing.lemmatize","text":"","title":"lemmatize"},{"location":"reference/kiara_plugin/language_processing/__init__/#kiara_plugin.language_processing.language_processing.tokens","text":"","title":"tokens"},{"location":"reference/kiara_plugin/language_processing/__init__/#kiara_plugin.language_processing.language_processing.tokens-classes","text":"RemoveStopwordsModule ( KiaraModule ) \u00b6 Remove stopwords from an array of token-lists. Source code in language_processing/language_processing/tokens.py class RemoveStopwordsModule ( KiaraModule ): \"\"\"Remove stopwords from an array of token-lists.\"\"\" _module_type_name = \"remove_stopwords.from.tokens_array\" def create_inputs_schema ( self , ) -> ValueSetSchema : # TODO: do something smart and check whether languages are already downloaded, if so, display selection in doc inputs : Dict [ str , Dict [ str , Any ]] = { \"tokens_array\" : { \"type\" : \"array\" , \"doc\" : \"An array of string lists (a list of tokens).\" , }, \"languages\" : { \"type\" : \"list\" , # \"doc\": f\"A list of language names to use default stopword lists for. Available: {', '.join(get_stopwords().fileids())}.\", \"doc\" : \"A list of language names to use default stopword lists for.\" , \"optional\" : True , }, \"additional_stopwords\" : { \"type\" : \"list\" , \"doc\" : \"A list of additional, custom stopwords.\" , \"optional\" : True , }, } return inputs def create_outputs_schema ( self , ) -> ValueSetSchema : outputs = { \"token_list\" : { \"type\" : \"array\" , \"doc\" : \"An array of string lists, with the stopwords removed.\" , } } return outputs def process ( self , inputs : ValueMap , outputs : ValueMap ) -> None : import pyarrow as pa custom_stopwords = inputs . get_value_data ( \"additional_stopwords\" ) languages = inputs . get_value_data ( \"languages\" ) if isinstance ( languages , str ): languages = [ languages ] stopwords = set () if languages : for language in languages : if language not in get_stopwords () . fileids (): raise KiaraProcessingException ( f \"Invalid language: { language } . Available: { ', ' . join ( get_stopwords () . fileids ()) } .\" ) stopwords . update ( get_stopwords () . words ( language )) if custom_stopwords : stopwords . update ( custom_stopwords ) if not stopwords : outputs . set_value ( \"token_list\" , inputs . get_value_obj ( \"token_lists\" )) return token_lists = inputs . get_value_data ( \"token_lists\" ) if hasattr ( token_lists , \"to_pylist\" ): token_lists = token_lists . to_pylist () result = [] for token_list in token_lists : cleaned_list = [ x for x in token_list if x not in stopwords ] result . append ( cleaned_list ) outputs . set_value ( \"token_list\" , pa . array ( result )) Methods \u00b6 create_inputs_schema ( self ) \u00b6 Return the schema for this types' inputs. Source code in language_processing/language_processing/tokens.py def create_inputs_schema ( self , ) -> ValueSetSchema : # TODO: do something smart and check whether languages are already downloaded, if so, display selection in doc inputs : Dict [ str , Dict [ str , Any ]] = { \"tokens_array\" : { \"type\" : \"array\" , \"doc\" : \"An array of string lists (a list of tokens).\" , }, \"languages\" : { \"type\" : \"list\" , # \"doc\": f\"A list of language names to use default stopword lists for. Available: {', '.join(get_stopwords().fileids())}.\", \"doc\" : \"A list of language names to use default stopword lists for.\" , \"optional\" : True , }, \"additional_stopwords\" : { \"type\" : \"list\" , \"doc\" : \"A list of additional, custom stopwords.\" , \"optional\" : True , }, } return inputs create_outputs_schema ( self ) \u00b6 Return the schema for this types' outputs. Source code in language_processing/language_processing/tokens.py def create_outputs_schema ( self , ) -> ValueSetSchema : outputs = { \"token_list\" : { \"type\" : \"array\" , \"doc\" : \"An array of string lists, with the stopwords removed.\" , } } return outputs process ( self , inputs , outputs ) \u00b6 Source code in language_processing/language_processing/tokens.py def process ( self , inputs : ValueMap , outputs : ValueMap ) -> None : import pyarrow as pa custom_stopwords = inputs . get_value_data ( \"additional_stopwords\" ) languages = inputs . get_value_data ( \"languages\" ) if isinstance ( languages , str ): languages = [ languages ] stopwords = set () if languages : for language in languages : if language not in get_stopwords () . fileids (): raise KiaraProcessingException ( f \"Invalid language: { language } . Available: { ', ' . join ( get_stopwords () . fileids ()) } .\" ) stopwords . update ( get_stopwords () . words ( language )) if custom_stopwords : stopwords . update ( custom_stopwords ) if not stopwords : outputs . set_value ( \"token_list\" , inputs . get_value_obj ( \"token_lists\" )) return token_lists = inputs . get_value_data ( \"token_lists\" ) if hasattr ( token_lists , \"to_pylist\" ): token_lists = token_lists . to_pylist () result = [] for token_list in token_lists : cleaned_list = [ x for x in token_list if x not in stopwords ] result . append ( cleaned_list ) outputs . set_value ( \"token_list\" , pa . array ( result )) TokenizTextArrayeModule ( KiaraModule ) \u00b6 Split sentences into words or words into characters. In other words, this operation establishes the word boundaries (i.e., tokens) a very helpful way of finding patterns. It is also the typical step prior to stemming and lemmatization Source code in language_processing/language_processing/tokens.py class TokenizTextArrayeModule ( KiaraModule ): \"\"\"Split sentences into words or words into characters. In other words, this operation establishes the word boundaries (i.e., tokens) a very helpful way of finding patterns. It is also the typical step prior to stemming and lemmatization \"\"\" _module_type_name = \"tokenize.texts_array\" KIARA_METADATA = { \"tags\" : [ \"tokenize\" , \"tokens\" ], } def create_inputs_schema ( self , ) -> ValueSetSchema : return { \"texts_array\" : { \"type\" : \"array\" , \"doc\" : \"An array of text items to be tokenized.\" , }, \"tokenize_by_word\" : { \"type\" : \"boolean\" , \"doc\" : \"Whether to tokenize by word (default), or character.\" , \"default\" : True , }, } def create_outputs_schema ( self , ) -> ValueSetSchema : return { \"tokens_array\" : { \"type\" : \"array\" , \"doc\" : \"The tokenized content, as an array of lists of strings.\" , } } def process ( self , inputs : ValueMap , outputs : ValueMap ): import warnings import nltk import numpy as np import pyarrow as pa import vaex array : KiaraArray = inputs . get_value_data ( \"texts_array\" ) # tokenize_by_word: bool = inputs.get_value_data(\"tokenize_by_word\") column : pa . Array = array . arrow_array warnings . filterwarnings ( \"ignore\" , category = np . VisibleDeprecationWarning ) def word_tokenize ( word ): result = nltk . word_tokenize ( word ) return result df = vaex . from_arrays ( column = column ) tokenized = df . apply ( word_tokenize , arguments = [ df . column ]) result_array = tokenized . to_arrow ( convert_to_native = True ) # TODO: remove this cast once the array data type can handle non-chunked arrays chunked = pa . chunked_array ( result_array ) outputs . set_values ( tokens_array = chunked ) # pandas_series: Series = column.to_pandas() # # tokenized = pandas_series.apply(lambda x: nltk.word_tokenize(x)) # # result_array = pa.Array.from_pandas(tokenized) # # outputs.set_values(tokens_array=result_array) KIARA_METADATA \u00b6 Methods \u00b6 create_inputs_schema ( self ) \u00b6 Return the schema for this types' inputs. Source code in language_processing/language_processing/tokens.py def create_inputs_schema ( self , ) -> ValueSetSchema : return { \"texts_array\" : { \"type\" : \"array\" , \"doc\" : \"An array of text items to be tokenized.\" , }, \"tokenize_by_word\" : { \"type\" : \"boolean\" , \"doc\" : \"Whether to tokenize by word (default), or character.\" , \"default\" : True , }, } create_outputs_schema ( self ) \u00b6 Return the schema for this types' outputs. Source code in language_processing/language_processing/tokens.py def create_outputs_schema ( self , ) -> ValueSetSchema : return { \"tokens_array\" : { \"type\" : \"array\" , \"doc\" : \"The tokenized content, as an array of lists of strings.\" , } } process ( self , inputs , outputs ) \u00b6 Source code in language_processing/language_processing/tokens.py def process ( self , inputs : ValueMap , outputs : ValueMap ): import warnings import nltk import numpy as np import pyarrow as pa import vaex array : KiaraArray = inputs . get_value_data ( \"texts_array\" ) # tokenize_by_word: bool = inputs.get_value_data(\"tokenize_by_word\") column : pa . Array = array . arrow_array warnings . filterwarnings ( \"ignore\" , category = np . VisibleDeprecationWarning ) def word_tokenize ( word ): result = nltk . word_tokenize ( word ) return result df = vaex . from_arrays ( column = column ) tokenized = df . apply ( word_tokenize , arguments = [ df . column ]) result_array = tokenized . to_arrow ( convert_to_native = True ) # TODO: remove this cast once the array data type can handle non-chunked arrays chunked = pa . chunked_array ( result_array ) outputs . set_values ( tokens_array = chunked ) # pandas_series: Series = column.to_pandas() # # tokenized = pandas_series.apply(lambda x: nltk.word_tokenize(x)) # # result_array = pa.Array.from_pandas(tokenized) # # outputs.set_values(tokens_array=result_array) TokenizeTextConfig ( KiaraModuleConfig ) pydantic-model \u00b6 Source code in language_processing/language_processing/tokens.py class TokenizeTextConfig ( KiaraModuleConfig ): filter_non_alpha : bool = Field ( description = \"Whether to filter out non alpha tokens.\" , default = True ) min_token_length : int = Field ( description = \"The minimum token length.\" , default = 3 ) to_lowercase : bool = Field ( description = \"Whether to lowercase the tokens.\" , default = True ) Attributes \u00b6 filter_non_alpha : bool pydantic-field \u00b6 Whether to filter out non alpha tokens. min_token_length : int pydantic-field \u00b6 The minimum token length. to_lowercase : bool pydantic-field \u00b6 Whether to lowercase the tokens. TokenizeTextModule ( KiaraModule ) \u00b6 Tokenize a string. Source code in language_processing/language_processing/tokens.py class TokenizeTextModule ( KiaraModule ): \"\"\"Tokenize a string.\"\"\" _config_cls = TokenizeTextConfig _module_type_name = \"tokenize.string\" def create_inputs_schema ( self , ) -> ValueSetSchema : inputs = { \"text\" : { \"type\" : \"string\" , \"doc\" : \"The text to tokenize.\" }} return inputs def create_outputs_schema ( self , ) -> ValueSetSchema : outputs = { \"token_list\" : { \"type\" : \"list\" , \"doc\" : \"The tokenized version of the input text.\" , } } return outputs def process ( self , inputs : ValueMap , outputs : ValueMap ) -> None : import nltk # TODO: module-independent caching? # language = inputs.get_value_data(\"language\") # text = inputs . get_value_data ( \"text\" ) tokenized = nltk . word_tokenize ( text ) result = tokenized if self . get_config_value ( \"min_token_length\" ) > 0 : result = ( x for x in tokenized if len ( x ) >= self . get_config_value ( \"min_token_length\" ) ) if self . get_config_value ( \"filter_non_alpha\" ): result = ( x for x in result if x . isalpha ()) if self . get_config_value ( \"to_lowercase\" ): result = ( x . lower () for x in result ) outputs . set_value ( \"token_list\" , list ( result )) Classes \u00b6 _config_cls ( KiaraModuleConfig ) private pydantic-model \u00b6 Source code in language_processing/language_processing/tokens.py class TokenizeTextConfig ( KiaraModuleConfig ): filter_non_alpha : bool = Field ( description = \"Whether to filter out non alpha tokens.\" , default = True ) min_token_length : int = Field ( description = \"The minimum token length.\" , default = 3 ) to_lowercase : bool = Field ( description = \"Whether to lowercase the tokens.\" , default = True ) Attributes \u00b6 filter_non_alpha : bool pydantic-field \u00b6 Whether to filter out non alpha tokens. min_token_length : int pydantic-field \u00b6 The minimum token length. to_lowercase : bool pydantic-field \u00b6 Whether to lowercase the tokens. Methods \u00b6 create_inputs_schema ( self ) \u00b6 Return the schema for this types' inputs. Source code in language_processing/language_processing/tokens.py def create_inputs_schema ( self , ) -> ValueSetSchema : inputs = { \"text\" : { \"type\" : \"string\" , \"doc\" : \"The text to tokenize.\" }} return inputs create_outputs_schema ( self ) \u00b6 Return the schema for this types' outputs. Source code in language_processing/language_processing/tokens.py def create_outputs_schema ( self , ) -> ValueSetSchema : outputs = { \"token_list\" : { \"type\" : \"list\" , \"doc\" : \"The tokenized version of the input text.\" , } } return outputs process ( self , inputs , outputs ) \u00b6 Source code in language_processing/language_processing/tokens.py def process ( self , inputs : ValueMap , outputs : ValueMap ) -> None : import nltk # TODO: module-independent caching? # language = inputs.get_value_data(\"language\") # text = inputs . get_value_data ( \"text\" ) tokenized = nltk . word_tokenize ( text ) result = tokenized if self . get_config_value ( \"min_token_length\" ) > 0 : result = ( x for x in tokenized if len ( x ) >= self . get_config_value ( \"min_token_length\" ) ) if self . get_config_value ( \"filter_non_alpha\" ): result = ( x for x in result if x . isalpha ()) if self . get_config_value ( \"to_lowercase\" ): result = ( x . lower () for x in result ) outputs . set_value ( \"token_list\" , list ( result )) get_stopwords () \u00b6 Source code in language_processing/language_processing/tokens.py def get_stopwords (): # TODO: make that smarter pass import nltk nltk . download ( \"punkt\" ) nltk . download ( \"stopwords\" ) from nltk.corpus import stopwords return stopwords","title":"Classes"},{"location":"reference/kiara_plugin/language_processing/__init__/#kiara_plugin.language_processing.models","text":"This module contains the metadata (and other) models that are used in the kiara_plugin.language_processing package. Those models are convenience wrappers that make it easier for kiara to find, create, manage and version metadata -- but also other type of models -- that is attached to data, as well as kiara modules. Metadata models must be a sub-class of kiara.metadata.MetadataModel . Other models usually sub-class a pydantic BaseModel or implement custom base classes.","title":"models"},{"location":"reference/kiara_plugin/language_processing/__init__/#kiara_plugin.language_processing.pipelines","text":"Default (empty) module that is used as a base path for pipelines contained in this package.","title":"pipelines"},{"location":"reference/kiara_plugin/language_processing/data_types/","text":"This module contains the value type classes that are used in the kiara_plugin.language_processing package.","title":"data_types"},{"location":"reference/kiara_plugin/language_processing/models/","text":"This module contains the metadata (and other) models that are used in the kiara_plugin.language_processing package. Those models are convenience wrappers that make it easier for kiara to find, create, manage and version metadata -- but also other type of models -- that is attached to data, as well as kiara modules. Metadata models must be a sub-class of kiara.metadata.MetadataModel . Other models usually sub-class a pydantic BaseModel or implement custom base classes.","title":"models"},{"location":"reference/kiara_plugin/language_processing/language_processing/__init__/","text":"Modules \u00b6 lda \u00b6 Classes \u00b6 LDAModule ( KiaraModule ) \u00b6 Perform Latent Dirichlet Allocation on a tokenized corpus. This module computes models for a range of number of topics provided by the user. Source code in language_processing/language_processing/lda.py class LDAModule ( KiaraModule ): \"\"\"Perform Latent Dirichlet Allocation on a tokenized corpus. This module computes models for a range of number of topics provided by the user. \"\"\" _module_type_name = \"generate.LDA.for.tokens_array\" KIARA_METADATA = { \"tags\" : [ \"LDA\" , \"tokens\" ], } def create_inputs_schema ( self , ) -> ValueSetSchema : inputs : Dict [ str , Dict [ str , Any ]] = { \"tokens_array\" : { \"type\" : \"array\" , \"doc\" : \"The text corpus.\" }, \"num_topics_min\" : { \"type\" : \"integer\" , \"doc\" : \"The minimal number of topics.\" , \"default\" : 7 , }, \"num_topics_max\" : { \"type\" : \"integer\" , \"doc\" : \"The max number of topics.\" , \"optional\" : True , }, \"compute_coherence\" : { \"type\" : \"boolean\" , \"doc\" : \"Whether to compute the coherence score for each model.\" , \"default\" : False , }, \"words_per_topic\" : { \"type\" : \"integer\" , \"doc\" : \"How many words per topic to put in the result model.\" , \"default\" : 10 , }, } return inputs def create_outputs_schema ( self , ) -> ValueSetSchema : outputs = { \"topic_models\" : { \"type\" : \"dict\" , \"doc\" : \"A dictionary with one coherence model table for each number of topics.\" , }, \"coherence_table\" : { \"type\" : \"table\" , \"doc\" : \"Coherence details.\" , \"optional\" : True , }, \"coherence_map\" : { \"type\" : \"dict\" , \"doc\" : \"A map with the coherence value for every number of topics.\" , }, } return outputs def create_model ( self , corpus , num_topics : int , id2word : Mapping [ str , int ]): from gensim.models import LdaModel model = LdaModel ( corpus , id2word = id2word , num_topics = num_topics , eval_every = None ) return model def compute_coherence ( self , model , corpus_model , id2word : Mapping [ str , int ]): from gensim.models import CoherenceModel coherencemodel = CoherenceModel ( model = model , texts = corpus_model , dictionary = id2word , coherence = \"c_v\" , processes = 1 , ) coherence_value = coherencemodel . get_coherence () return coherence_value def assemble_coherence ( self , models_dict : Mapping [ int , Any ], words_per_topic : int ): import pandas as pd import pyarrow as pa # Create list with topics and topic words for each number of topics num_topics_list = [] topics_list = [] for ( num_topics , model , ) in models_dict . items (): num_topics_list . append ( num_topics ) topic_print = model . print_topics ( num_words = words_per_topic ) topics_list . append ( topic_print ) df_coherence_table = pd . DataFrame ( columns = [ \"topic_id\" , \"words\" , \"num_topics\" ]) idx = 0 for i in range ( len ( topics_list )): for j in range ( len ( topics_list [ i ])): df_coherence_table . loc [ idx ] = \"\" df_coherence_table [ \"topic_id\" ] . loc [ idx ] = j + 1 df_coherence_table [ \"words\" ] . loc [ idx ] = \", \" . join ( re . findall ( r '\"(\\w+)\"' , topics_list [ i ][ j ][ 1 ]) ) df_coherence_table [ \"num_topics\" ] . loc [ idx ] = num_topics_list [ i ] idx += 1 coherence_table = pa . Table . from_pandas ( df_coherence_table , preserve_index = False ) return coherence_table def process ( self , inputs : ValueMap , outputs : ValueMap ) -> None : from gensim import corpora logging . getLogger ( \"gensim\" ) . setLevel ( logging . ERROR ) tokens_array : KiaraArray = inputs . get_value_data ( \"tokens_array\" ) tokens = tokens_array . arrow_array . to_pylist () words_per_topic = inputs . get_value_data ( \"words_per_topic\" ) num_topics_min = inputs . get_value_data ( \"num_topics_min\" ) num_topics_max = inputs . get_value_data ( \"num_topics_max\" ) if num_topics_max is None : num_topics_max = num_topics_min compute_coherence = inputs . get_value_data ( \"compute_coherence\" ) id2word = corpora . Dictionary ( tokens ) corpus = [ id2word . doc2bow ( text ) for text in tokens ] # model = gensim.models.ldamulticore.LdaMulticore( # corpus, id2word=id2word, num_topics=num_topics, eval_every=None # ) models = {} model_tables = {} coherence = {} # multi_threaded = False # if not multi_threaded: for nt in range ( num_topics_min , num_topics_max + 1 ): model = self . create_model ( corpus = corpus , num_topics = nt , id2word = id2word ) models [ nt ] = model topic_print_model = model . print_topics ( num_words = words_per_topic ) # dbg(topic_print_model) # df = pd.DataFrame(topic_print_model, columns=[\"topic_id\", \"words\"]) # TODO: create table directly # result_table = Table.from_pandas(df) model_tables [ nt ] = topic_print_model if compute_coherence : coherence_result = self . compute_coherence ( model = model , corpus_model = tokens , id2word = id2word ) coherence [ nt ] = coherence_result # else: # def create_model(num_topics): # model = self.create_model(corpus=corpus, num_topics=num_topics, id2word=id2word) # topic_print_model = model.print_topics(num_words=30) # df = pd.DataFrame(topic_print_model, columns=[\"topic_id\", \"words\"]) # # TODO: create table directly # result_table = Table.from_pandas(df) # coherence_result = None # if compute_coherence: # coherence_result = self.compute_coherence(model=model, corpus_model=tokens, id2word=id2word) # return (num_topics, model, result_table, coherence_result) # # executor = ThreadPoolExecutor() # results: typing.Any = executor.map(create_model, range(num_topics_min, num_topics_max+1)) # executor.shutdown(wait=True) # for r in results: # models[r[0]] = r[1] # model_tables[r[0]] = r[2] # if compute_coherence: # coherence[r[0]] = r[3] # df_coherence = pd.DataFrame(coherence.keys(), columns=[\"Number of topics\"]) # df_coherence[\"Coherence\"] = coherence.values() if compute_coherence : coherence_table = self . assemble_coherence ( models_dict = models , words_per_topic = words_per_topic ) else : coherence_table = None outputs . set_values ( topic_models = model_tables , coherence_table = coherence_table , coherence_map = coherence , ) KIARA_METADATA \u00b6 Methods \u00b6 assemble_coherence ( self , models_dict , words_per_topic ) \u00b6 Source code in language_processing/language_processing/lda.py def assemble_coherence ( self , models_dict : Mapping [ int , Any ], words_per_topic : int ): import pandas as pd import pyarrow as pa # Create list with topics and topic words for each number of topics num_topics_list = [] topics_list = [] for ( num_topics , model , ) in models_dict . items (): num_topics_list . append ( num_topics ) topic_print = model . print_topics ( num_words = words_per_topic ) topics_list . append ( topic_print ) df_coherence_table = pd . DataFrame ( columns = [ \"topic_id\" , \"words\" , \"num_topics\" ]) idx = 0 for i in range ( len ( topics_list )): for j in range ( len ( topics_list [ i ])): df_coherence_table . loc [ idx ] = \"\" df_coherence_table [ \"topic_id\" ] . loc [ idx ] = j + 1 df_coherence_table [ \"words\" ] . loc [ idx ] = \", \" . join ( re . findall ( r '\"(\\w+)\"' , topics_list [ i ][ j ][ 1 ]) ) df_coherence_table [ \"num_topics\" ] . loc [ idx ] = num_topics_list [ i ] idx += 1 coherence_table = pa . Table . from_pandas ( df_coherence_table , preserve_index = False ) return coherence_table compute_coherence ( self , model , corpus_model , id2word ) \u00b6 Source code in language_processing/language_processing/lda.py def compute_coherence ( self , model , corpus_model , id2word : Mapping [ str , int ]): from gensim.models import CoherenceModel coherencemodel = CoherenceModel ( model = model , texts = corpus_model , dictionary = id2word , coherence = \"c_v\" , processes = 1 , ) coherence_value = coherencemodel . get_coherence () return coherence_value create_inputs_schema ( self ) \u00b6 Return the schema for this types' inputs. Source code in language_processing/language_processing/lda.py def create_inputs_schema ( self , ) -> ValueSetSchema : inputs : Dict [ str , Dict [ str , Any ]] = { \"tokens_array\" : { \"type\" : \"array\" , \"doc\" : \"The text corpus.\" }, \"num_topics_min\" : { \"type\" : \"integer\" , \"doc\" : \"The minimal number of topics.\" , \"default\" : 7 , }, \"num_topics_max\" : { \"type\" : \"integer\" , \"doc\" : \"The max number of topics.\" , \"optional\" : True , }, \"compute_coherence\" : { \"type\" : \"boolean\" , \"doc\" : \"Whether to compute the coherence score for each model.\" , \"default\" : False , }, \"words_per_topic\" : { \"type\" : \"integer\" , \"doc\" : \"How many words per topic to put in the result model.\" , \"default\" : 10 , }, } return inputs create_model ( self , corpus , num_topics , id2word ) \u00b6 Source code in language_processing/language_processing/lda.py def create_model ( self , corpus , num_topics : int , id2word : Mapping [ str , int ]): from gensim.models import LdaModel model = LdaModel ( corpus , id2word = id2word , num_topics = num_topics , eval_every = None ) return model create_outputs_schema ( self ) \u00b6 Return the schema for this types' outputs. Source code in language_processing/language_processing/lda.py def create_outputs_schema ( self , ) -> ValueSetSchema : outputs = { \"topic_models\" : { \"type\" : \"dict\" , \"doc\" : \"A dictionary with one coherence model table for each number of topics.\" , }, \"coherence_table\" : { \"type\" : \"table\" , \"doc\" : \"Coherence details.\" , \"optional\" : True , }, \"coherence_map\" : { \"type\" : \"dict\" , \"doc\" : \"A map with the coherence value for every number of topics.\" , }, } return outputs process ( self , inputs , outputs ) \u00b6 Source code in language_processing/language_processing/lda.py def process ( self , inputs : ValueMap , outputs : ValueMap ) -> None : from gensim import corpora logging . getLogger ( \"gensim\" ) . setLevel ( logging . ERROR ) tokens_array : KiaraArray = inputs . get_value_data ( \"tokens_array\" ) tokens = tokens_array . arrow_array . to_pylist () words_per_topic = inputs . get_value_data ( \"words_per_topic\" ) num_topics_min = inputs . get_value_data ( \"num_topics_min\" ) num_topics_max = inputs . get_value_data ( \"num_topics_max\" ) if num_topics_max is None : num_topics_max = num_topics_min compute_coherence = inputs . get_value_data ( \"compute_coherence\" ) id2word = corpora . Dictionary ( tokens ) corpus = [ id2word . doc2bow ( text ) for text in tokens ] # model = gensim.models.ldamulticore.LdaMulticore( # corpus, id2word=id2word, num_topics=num_topics, eval_every=None # ) models = {} model_tables = {} coherence = {} # multi_threaded = False # if not multi_threaded: for nt in range ( num_topics_min , num_topics_max + 1 ): model = self . create_model ( corpus = corpus , num_topics = nt , id2word = id2word ) models [ nt ] = model topic_print_model = model . print_topics ( num_words = words_per_topic ) # dbg(topic_print_model) # df = pd.DataFrame(topic_print_model, columns=[\"topic_id\", \"words\"]) # TODO: create table directly # result_table = Table.from_pandas(df) model_tables [ nt ] = topic_print_model if compute_coherence : coherence_result = self . compute_coherence ( model = model , corpus_model = tokens , id2word = id2word ) coherence [ nt ] = coherence_result # else: # def create_model(num_topics): # model = self.create_model(corpus=corpus, num_topics=num_topics, id2word=id2word) # topic_print_model = model.print_topics(num_words=30) # df = pd.DataFrame(topic_print_model, columns=[\"topic_id\", \"words\"]) # # TODO: create table directly # result_table = Table.from_pandas(df) # coherence_result = None # if compute_coherence: # coherence_result = self.compute_coherence(model=model, corpus_model=tokens, id2word=id2word) # return (num_topics, model, result_table, coherence_result) # # executor = ThreadPoolExecutor() # results: typing.Any = executor.map(create_model, range(num_topics_min, num_topics_max+1)) # executor.shutdown(wait=True) # for r in results: # models[r[0]] = r[1] # model_tables[r[0]] = r[2] # if compute_coherence: # coherence[r[0]] = r[3] # df_coherence = pd.DataFrame(coherence.keys(), columns=[\"Number of topics\"]) # df_coherence[\"Coherence\"] = coherence.values() if compute_coherence : coherence_table = self . assemble_coherence ( models_dict = models , words_per_topic = words_per_topic ) else : coherence_table = None outputs . set_values ( topic_models = model_tables , coherence_table = coherence_table , coherence_map = coherence , ) lemmatize \u00b6 tokens \u00b6 Classes \u00b6 RemoveStopwordsModule ( KiaraModule ) \u00b6 Remove stopwords from an array of token-lists. Source code in language_processing/language_processing/tokens.py class RemoveStopwordsModule ( KiaraModule ): \"\"\"Remove stopwords from an array of token-lists.\"\"\" _module_type_name = \"remove_stopwords.from.tokens_array\" def create_inputs_schema ( self , ) -> ValueSetSchema : # TODO: do something smart and check whether languages are already downloaded, if so, display selection in doc inputs : Dict [ str , Dict [ str , Any ]] = { \"tokens_array\" : { \"type\" : \"array\" , \"doc\" : \"An array of string lists (a list of tokens).\" , }, \"languages\" : { \"type\" : \"list\" , # \"doc\": f\"A list of language names to use default stopword lists for. Available: {', '.join(get_stopwords().fileids())}.\", \"doc\" : \"A list of language names to use default stopword lists for.\" , \"optional\" : True , }, \"additional_stopwords\" : { \"type\" : \"list\" , \"doc\" : \"A list of additional, custom stopwords.\" , \"optional\" : True , }, } return inputs def create_outputs_schema ( self , ) -> ValueSetSchema : outputs = { \"token_list\" : { \"type\" : \"array\" , \"doc\" : \"An array of string lists, with the stopwords removed.\" , } } return outputs def process ( self , inputs : ValueMap , outputs : ValueMap ) -> None : import pyarrow as pa custom_stopwords = inputs . get_value_data ( \"additional_stopwords\" ) languages = inputs . get_value_data ( \"languages\" ) if isinstance ( languages , str ): languages = [ languages ] stopwords = set () if languages : for language in languages : if language not in get_stopwords () . fileids (): raise KiaraProcessingException ( f \"Invalid language: { language } . Available: { ', ' . join ( get_stopwords () . fileids ()) } .\" ) stopwords . update ( get_stopwords () . words ( language )) if custom_stopwords : stopwords . update ( custom_stopwords ) if not stopwords : outputs . set_value ( \"token_list\" , inputs . get_value_obj ( \"token_lists\" )) return token_lists = inputs . get_value_data ( \"token_lists\" ) if hasattr ( token_lists , \"to_pylist\" ): token_lists = token_lists . to_pylist () result = [] for token_list in token_lists : cleaned_list = [ x for x in token_list if x not in stopwords ] result . append ( cleaned_list ) outputs . set_value ( \"token_list\" , pa . array ( result )) Methods \u00b6 create_inputs_schema ( self ) \u00b6 Return the schema for this types' inputs. Source code in language_processing/language_processing/tokens.py def create_inputs_schema ( self , ) -> ValueSetSchema : # TODO: do something smart and check whether languages are already downloaded, if so, display selection in doc inputs : Dict [ str , Dict [ str , Any ]] = { \"tokens_array\" : { \"type\" : \"array\" , \"doc\" : \"An array of string lists (a list of tokens).\" , }, \"languages\" : { \"type\" : \"list\" , # \"doc\": f\"A list of language names to use default stopword lists for. Available: {', '.join(get_stopwords().fileids())}.\", \"doc\" : \"A list of language names to use default stopword lists for.\" , \"optional\" : True , }, \"additional_stopwords\" : { \"type\" : \"list\" , \"doc\" : \"A list of additional, custom stopwords.\" , \"optional\" : True , }, } return inputs create_outputs_schema ( self ) \u00b6 Return the schema for this types' outputs. Source code in language_processing/language_processing/tokens.py def create_outputs_schema ( self , ) -> ValueSetSchema : outputs = { \"token_list\" : { \"type\" : \"array\" , \"doc\" : \"An array of string lists, with the stopwords removed.\" , } } return outputs process ( self , inputs , outputs ) \u00b6 Source code in language_processing/language_processing/tokens.py def process ( self , inputs : ValueMap , outputs : ValueMap ) -> None : import pyarrow as pa custom_stopwords = inputs . get_value_data ( \"additional_stopwords\" ) languages = inputs . get_value_data ( \"languages\" ) if isinstance ( languages , str ): languages = [ languages ] stopwords = set () if languages : for language in languages : if language not in get_stopwords () . fileids (): raise KiaraProcessingException ( f \"Invalid language: { language } . Available: { ', ' . join ( get_stopwords () . fileids ()) } .\" ) stopwords . update ( get_stopwords () . words ( language )) if custom_stopwords : stopwords . update ( custom_stopwords ) if not stopwords : outputs . set_value ( \"token_list\" , inputs . get_value_obj ( \"token_lists\" )) return token_lists = inputs . get_value_data ( \"token_lists\" ) if hasattr ( token_lists , \"to_pylist\" ): token_lists = token_lists . to_pylist () result = [] for token_list in token_lists : cleaned_list = [ x for x in token_list if x not in stopwords ] result . append ( cleaned_list ) outputs . set_value ( \"token_list\" , pa . array ( result )) TokenizTextArrayeModule ( KiaraModule ) \u00b6 Split sentences into words or words into characters. In other words, this operation establishes the word boundaries (i.e., tokens) a very helpful way of finding patterns. It is also the typical step prior to stemming and lemmatization Source code in language_processing/language_processing/tokens.py class TokenizTextArrayeModule ( KiaraModule ): \"\"\"Split sentences into words or words into characters. In other words, this operation establishes the word boundaries (i.e., tokens) a very helpful way of finding patterns. It is also the typical step prior to stemming and lemmatization \"\"\" _module_type_name = \"tokenize.texts_array\" KIARA_METADATA = { \"tags\" : [ \"tokenize\" , \"tokens\" ], } def create_inputs_schema ( self , ) -> ValueSetSchema : return { \"texts_array\" : { \"type\" : \"array\" , \"doc\" : \"An array of text items to be tokenized.\" , }, \"tokenize_by_word\" : { \"type\" : \"boolean\" , \"doc\" : \"Whether to tokenize by word (default), or character.\" , \"default\" : True , }, } def create_outputs_schema ( self , ) -> ValueSetSchema : return { \"tokens_array\" : { \"type\" : \"array\" , \"doc\" : \"The tokenized content, as an array of lists of strings.\" , } } def process ( self , inputs : ValueMap , outputs : ValueMap ): import warnings import nltk import numpy as np import pyarrow as pa import vaex array : KiaraArray = inputs . get_value_data ( \"texts_array\" ) # tokenize_by_word: bool = inputs.get_value_data(\"tokenize_by_word\") column : pa . Array = array . arrow_array warnings . filterwarnings ( \"ignore\" , category = np . VisibleDeprecationWarning ) def word_tokenize ( word ): result = nltk . word_tokenize ( word ) return result df = vaex . from_arrays ( column = column ) tokenized = df . apply ( word_tokenize , arguments = [ df . column ]) result_array = tokenized . to_arrow ( convert_to_native = True ) # TODO: remove this cast once the array data type can handle non-chunked arrays chunked = pa . chunked_array ( result_array ) outputs . set_values ( tokens_array = chunked ) # pandas_series: Series = column.to_pandas() # # tokenized = pandas_series.apply(lambda x: nltk.word_tokenize(x)) # # result_array = pa.Array.from_pandas(tokenized) # # outputs.set_values(tokens_array=result_array) KIARA_METADATA \u00b6 Methods \u00b6 create_inputs_schema ( self ) \u00b6 Return the schema for this types' inputs. Source code in language_processing/language_processing/tokens.py def create_inputs_schema ( self , ) -> ValueSetSchema : return { \"texts_array\" : { \"type\" : \"array\" , \"doc\" : \"An array of text items to be tokenized.\" , }, \"tokenize_by_word\" : { \"type\" : \"boolean\" , \"doc\" : \"Whether to tokenize by word (default), or character.\" , \"default\" : True , }, } create_outputs_schema ( self ) \u00b6 Return the schema for this types' outputs. Source code in language_processing/language_processing/tokens.py def create_outputs_schema ( self , ) -> ValueSetSchema : return { \"tokens_array\" : { \"type\" : \"array\" , \"doc\" : \"The tokenized content, as an array of lists of strings.\" , } } process ( self , inputs , outputs ) \u00b6 Source code in language_processing/language_processing/tokens.py def process ( self , inputs : ValueMap , outputs : ValueMap ): import warnings import nltk import numpy as np import pyarrow as pa import vaex array : KiaraArray = inputs . get_value_data ( \"texts_array\" ) # tokenize_by_word: bool = inputs.get_value_data(\"tokenize_by_word\") column : pa . Array = array . arrow_array warnings . filterwarnings ( \"ignore\" , category = np . VisibleDeprecationWarning ) def word_tokenize ( word ): result = nltk . word_tokenize ( word ) return result df = vaex . from_arrays ( column = column ) tokenized = df . apply ( word_tokenize , arguments = [ df . column ]) result_array = tokenized . to_arrow ( convert_to_native = True ) # TODO: remove this cast once the array data type can handle non-chunked arrays chunked = pa . chunked_array ( result_array ) outputs . set_values ( tokens_array = chunked ) # pandas_series: Series = column.to_pandas() # # tokenized = pandas_series.apply(lambda x: nltk.word_tokenize(x)) # # result_array = pa.Array.from_pandas(tokenized) # # outputs.set_values(tokens_array=result_array) TokenizeTextConfig ( KiaraModuleConfig ) pydantic-model \u00b6 Source code in language_processing/language_processing/tokens.py class TokenizeTextConfig ( KiaraModuleConfig ): filter_non_alpha : bool = Field ( description = \"Whether to filter out non alpha tokens.\" , default = True ) min_token_length : int = Field ( description = \"The minimum token length.\" , default = 3 ) to_lowercase : bool = Field ( description = \"Whether to lowercase the tokens.\" , default = True ) Attributes \u00b6 filter_non_alpha : bool pydantic-field \u00b6 Whether to filter out non alpha tokens. min_token_length : int pydantic-field \u00b6 The minimum token length. to_lowercase : bool pydantic-field \u00b6 Whether to lowercase the tokens. TokenizeTextModule ( KiaraModule ) \u00b6 Tokenize a string. Source code in language_processing/language_processing/tokens.py class TokenizeTextModule ( KiaraModule ): \"\"\"Tokenize a string.\"\"\" _config_cls = TokenizeTextConfig _module_type_name = \"tokenize.string\" def create_inputs_schema ( self , ) -> ValueSetSchema : inputs = { \"text\" : { \"type\" : \"string\" , \"doc\" : \"The text to tokenize.\" }} return inputs def create_outputs_schema ( self , ) -> ValueSetSchema : outputs = { \"token_list\" : { \"type\" : \"list\" , \"doc\" : \"The tokenized version of the input text.\" , } } return outputs def process ( self , inputs : ValueMap , outputs : ValueMap ) -> None : import nltk # TODO: module-independent caching? # language = inputs.get_value_data(\"language\") # text = inputs . get_value_data ( \"text\" ) tokenized = nltk . word_tokenize ( text ) result = tokenized if self . get_config_value ( \"min_token_length\" ) > 0 : result = ( x for x in tokenized if len ( x ) >= self . get_config_value ( \"min_token_length\" ) ) if self . get_config_value ( \"filter_non_alpha\" ): result = ( x for x in result if x . isalpha ()) if self . get_config_value ( \"to_lowercase\" ): result = ( x . lower () for x in result ) outputs . set_value ( \"token_list\" , list ( result )) Classes \u00b6 _config_cls ( KiaraModuleConfig ) private pydantic-model \u00b6 Source code in language_processing/language_processing/tokens.py class TokenizeTextConfig ( KiaraModuleConfig ): filter_non_alpha : bool = Field ( description = \"Whether to filter out non alpha tokens.\" , default = True ) min_token_length : int = Field ( description = \"The minimum token length.\" , default = 3 ) to_lowercase : bool = Field ( description = \"Whether to lowercase the tokens.\" , default = True ) Attributes \u00b6 filter_non_alpha : bool pydantic-field \u00b6 Whether to filter out non alpha tokens. min_token_length : int pydantic-field \u00b6 The minimum token length. to_lowercase : bool pydantic-field \u00b6 Whether to lowercase the tokens. Methods \u00b6 create_inputs_schema ( self ) \u00b6 Return the schema for this types' inputs. Source code in language_processing/language_processing/tokens.py def create_inputs_schema ( self , ) -> ValueSetSchema : inputs = { \"text\" : { \"type\" : \"string\" , \"doc\" : \"The text to tokenize.\" }} return inputs create_outputs_schema ( self ) \u00b6 Return the schema for this types' outputs. Source code in language_processing/language_processing/tokens.py def create_outputs_schema ( self , ) -> ValueSetSchema : outputs = { \"token_list\" : { \"type\" : \"list\" , \"doc\" : \"The tokenized version of the input text.\" , } } return outputs process ( self , inputs , outputs ) \u00b6 Source code in language_processing/language_processing/tokens.py def process ( self , inputs : ValueMap , outputs : ValueMap ) -> None : import nltk # TODO: module-independent caching? # language = inputs.get_value_data(\"language\") # text = inputs . get_value_data ( \"text\" ) tokenized = nltk . word_tokenize ( text ) result = tokenized if self . get_config_value ( \"min_token_length\" ) > 0 : result = ( x for x in tokenized if len ( x ) >= self . get_config_value ( \"min_token_length\" ) ) if self . get_config_value ( \"filter_non_alpha\" ): result = ( x for x in result if x . isalpha ()) if self . get_config_value ( \"to_lowercase\" ): result = ( x . lower () for x in result ) outputs . set_value ( \"token_list\" , list ( result )) get_stopwords () \u00b6 Source code in language_processing/language_processing/tokens.py def get_stopwords (): # TODO: make that smarter pass import nltk nltk . download ( \"punkt\" ) nltk . download ( \"stopwords\" ) from nltk.corpus import stopwords return stopwords","title":"language_processing"},{"location":"reference/kiara_plugin/language_processing/language_processing/__init__/#kiara_plugin.language_processing.language_processing-modules","text":"","title":"Modules"},{"location":"reference/kiara_plugin/language_processing/language_processing/__init__/#kiara_plugin.language_processing.language_processing.lda","text":"","title":"lda"},{"location":"reference/kiara_plugin/language_processing/language_processing/__init__/#kiara_plugin.language_processing.language_processing.lda-classes","text":"","title":"Classes"},{"location":"reference/kiara_plugin/language_processing/language_processing/__init__/#kiara_plugin.language_processing.language_processing.lda.LDAModule","text":"Perform Latent Dirichlet Allocation on a tokenized corpus. This module computes models for a range of number of topics provided by the user. Source code in language_processing/language_processing/lda.py class LDAModule ( KiaraModule ): \"\"\"Perform Latent Dirichlet Allocation on a tokenized corpus. This module computes models for a range of number of topics provided by the user. \"\"\" _module_type_name = \"generate.LDA.for.tokens_array\" KIARA_METADATA = { \"tags\" : [ \"LDA\" , \"tokens\" ], } def create_inputs_schema ( self , ) -> ValueSetSchema : inputs : Dict [ str , Dict [ str , Any ]] = { \"tokens_array\" : { \"type\" : \"array\" , \"doc\" : \"The text corpus.\" }, \"num_topics_min\" : { \"type\" : \"integer\" , \"doc\" : \"The minimal number of topics.\" , \"default\" : 7 , }, \"num_topics_max\" : { \"type\" : \"integer\" , \"doc\" : \"The max number of topics.\" , \"optional\" : True , }, \"compute_coherence\" : { \"type\" : \"boolean\" , \"doc\" : \"Whether to compute the coherence score for each model.\" , \"default\" : False , }, \"words_per_topic\" : { \"type\" : \"integer\" , \"doc\" : \"How many words per topic to put in the result model.\" , \"default\" : 10 , }, } return inputs def create_outputs_schema ( self , ) -> ValueSetSchema : outputs = { \"topic_models\" : { \"type\" : \"dict\" , \"doc\" : \"A dictionary with one coherence model table for each number of topics.\" , }, \"coherence_table\" : { \"type\" : \"table\" , \"doc\" : \"Coherence details.\" , \"optional\" : True , }, \"coherence_map\" : { \"type\" : \"dict\" , \"doc\" : \"A map with the coherence value for every number of topics.\" , }, } return outputs def create_model ( self , corpus , num_topics : int , id2word : Mapping [ str , int ]): from gensim.models import LdaModel model = LdaModel ( corpus , id2word = id2word , num_topics = num_topics , eval_every = None ) return model def compute_coherence ( self , model , corpus_model , id2word : Mapping [ str , int ]): from gensim.models import CoherenceModel coherencemodel = CoherenceModel ( model = model , texts = corpus_model , dictionary = id2word , coherence = \"c_v\" , processes = 1 , ) coherence_value = coherencemodel . get_coherence () return coherence_value def assemble_coherence ( self , models_dict : Mapping [ int , Any ], words_per_topic : int ): import pandas as pd import pyarrow as pa # Create list with topics and topic words for each number of topics num_topics_list = [] topics_list = [] for ( num_topics , model , ) in models_dict . items (): num_topics_list . append ( num_topics ) topic_print = model . print_topics ( num_words = words_per_topic ) topics_list . append ( topic_print ) df_coherence_table = pd . DataFrame ( columns = [ \"topic_id\" , \"words\" , \"num_topics\" ]) idx = 0 for i in range ( len ( topics_list )): for j in range ( len ( topics_list [ i ])): df_coherence_table . loc [ idx ] = \"\" df_coherence_table [ \"topic_id\" ] . loc [ idx ] = j + 1 df_coherence_table [ \"words\" ] . loc [ idx ] = \", \" . join ( re . findall ( r '\"(\\w+)\"' , topics_list [ i ][ j ][ 1 ]) ) df_coherence_table [ \"num_topics\" ] . loc [ idx ] = num_topics_list [ i ] idx += 1 coherence_table = pa . Table . from_pandas ( df_coherence_table , preserve_index = False ) return coherence_table def process ( self , inputs : ValueMap , outputs : ValueMap ) -> None : from gensim import corpora logging . getLogger ( \"gensim\" ) . setLevel ( logging . ERROR ) tokens_array : KiaraArray = inputs . get_value_data ( \"tokens_array\" ) tokens = tokens_array . arrow_array . to_pylist () words_per_topic = inputs . get_value_data ( \"words_per_topic\" ) num_topics_min = inputs . get_value_data ( \"num_topics_min\" ) num_topics_max = inputs . get_value_data ( \"num_topics_max\" ) if num_topics_max is None : num_topics_max = num_topics_min compute_coherence = inputs . get_value_data ( \"compute_coherence\" ) id2word = corpora . Dictionary ( tokens ) corpus = [ id2word . doc2bow ( text ) for text in tokens ] # model = gensim.models.ldamulticore.LdaMulticore( # corpus, id2word=id2word, num_topics=num_topics, eval_every=None # ) models = {} model_tables = {} coherence = {} # multi_threaded = False # if not multi_threaded: for nt in range ( num_topics_min , num_topics_max + 1 ): model = self . create_model ( corpus = corpus , num_topics = nt , id2word = id2word ) models [ nt ] = model topic_print_model = model . print_topics ( num_words = words_per_topic ) # dbg(topic_print_model) # df = pd.DataFrame(topic_print_model, columns=[\"topic_id\", \"words\"]) # TODO: create table directly # result_table = Table.from_pandas(df) model_tables [ nt ] = topic_print_model if compute_coherence : coherence_result = self . compute_coherence ( model = model , corpus_model = tokens , id2word = id2word ) coherence [ nt ] = coherence_result # else: # def create_model(num_topics): # model = self.create_model(corpus=corpus, num_topics=num_topics, id2word=id2word) # topic_print_model = model.print_topics(num_words=30) # df = pd.DataFrame(topic_print_model, columns=[\"topic_id\", \"words\"]) # # TODO: create table directly # result_table = Table.from_pandas(df) # coherence_result = None # if compute_coherence: # coherence_result = self.compute_coherence(model=model, corpus_model=tokens, id2word=id2word) # return (num_topics, model, result_table, coherence_result) # # executor = ThreadPoolExecutor() # results: typing.Any = executor.map(create_model, range(num_topics_min, num_topics_max+1)) # executor.shutdown(wait=True) # for r in results: # models[r[0]] = r[1] # model_tables[r[0]] = r[2] # if compute_coherence: # coherence[r[0]] = r[3] # df_coherence = pd.DataFrame(coherence.keys(), columns=[\"Number of topics\"]) # df_coherence[\"Coherence\"] = coherence.values() if compute_coherence : coherence_table = self . assemble_coherence ( models_dict = models , words_per_topic = words_per_topic ) else : coherence_table = None outputs . set_values ( topic_models = model_tables , coherence_table = coherence_table , coherence_map = coherence , ) KIARA_METADATA \u00b6","title":"LDAModule"},{"location":"reference/kiara_plugin/language_processing/language_processing/__init__/#kiara_plugin.language_processing.language_processing.lda.LDAModule-methods","text":"assemble_coherence ( self , models_dict , words_per_topic ) \u00b6 Source code in language_processing/language_processing/lda.py def assemble_coherence ( self , models_dict : Mapping [ int , Any ], words_per_topic : int ): import pandas as pd import pyarrow as pa # Create list with topics and topic words for each number of topics num_topics_list = [] topics_list = [] for ( num_topics , model , ) in models_dict . items (): num_topics_list . append ( num_topics ) topic_print = model . print_topics ( num_words = words_per_topic ) topics_list . append ( topic_print ) df_coherence_table = pd . DataFrame ( columns = [ \"topic_id\" , \"words\" , \"num_topics\" ]) idx = 0 for i in range ( len ( topics_list )): for j in range ( len ( topics_list [ i ])): df_coherence_table . loc [ idx ] = \"\" df_coherence_table [ \"topic_id\" ] . loc [ idx ] = j + 1 df_coherence_table [ \"words\" ] . loc [ idx ] = \", \" . join ( re . findall ( r '\"(\\w+)\"' , topics_list [ i ][ j ][ 1 ]) ) df_coherence_table [ \"num_topics\" ] . loc [ idx ] = num_topics_list [ i ] idx += 1 coherence_table = pa . Table . from_pandas ( df_coherence_table , preserve_index = False ) return coherence_table compute_coherence ( self , model , corpus_model , id2word ) \u00b6 Source code in language_processing/language_processing/lda.py def compute_coherence ( self , model , corpus_model , id2word : Mapping [ str , int ]): from gensim.models import CoherenceModel coherencemodel = CoherenceModel ( model = model , texts = corpus_model , dictionary = id2word , coherence = \"c_v\" , processes = 1 , ) coherence_value = coherencemodel . get_coherence () return coherence_value create_inputs_schema ( self ) \u00b6 Return the schema for this types' inputs. Source code in language_processing/language_processing/lda.py def create_inputs_schema ( self , ) -> ValueSetSchema : inputs : Dict [ str , Dict [ str , Any ]] = { \"tokens_array\" : { \"type\" : \"array\" , \"doc\" : \"The text corpus.\" }, \"num_topics_min\" : { \"type\" : \"integer\" , \"doc\" : \"The minimal number of topics.\" , \"default\" : 7 , }, \"num_topics_max\" : { \"type\" : \"integer\" , \"doc\" : \"The max number of topics.\" , \"optional\" : True , }, \"compute_coherence\" : { \"type\" : \"boolean\" , \"doc\" : \"Whether to compute the coherence score for each model.\" , \"default\" : False , }, \"words_per_topic\" : { \"type\" : \"integer\" , \"doc\" : \"How many words per topic to put in the result model.\" , \"default\" : 10 , }, } return inputs create_model ( self , corpus , num_topics , id2word ) \u00b6 Source code in language_processing/language_processing/lda.py def create_model ( self , corpus , num_topics : int , id2word : Mapping [ str , int ]): from gensim.models import LdaModel model = LdaModel ( corpus , id2word = id2word , num_topics = num_topics , eval_every = None ) return model create_outputs_schema ( self ) \u00b6 Return the schema for this types' outputs. Source code in language_processing/language_processing/lda.py def create_outputs_schema ( self , ) -> ValueSetSchema : outputs = { \"topic_models\" : { \"type\" : \"dict\" , \"doc\" : \"A dictionary with one coherence model table for each number of topics.\" , }, \"coherence_table\" : { \"type\" : \"table\" , \"doc\" : \"Coherence details.\" , \"optional\" : True , }, \"coherence_map\" : { \"type\" : \"dict\" , \"doc\" : \"A map with the coherence value for every number of topics.\" , }, } return outputs process ( self , inputs , outputs ) \u00b6 Source code in language_processing/language_processing/lda.py def process ( self , inputs : ValueMap , outputs : ValueMap ) -> None : from gensim import corpora logging . getLogger ( \"gensim\" ) . setLevel ( logging . ERROR ) tokens_array : KiaraArray = inputs . get_value_data ( \"tokens_array\" ) tokens = tokens_array . arrow_array . to_pylist () words_per_topic = inputs . get_value_data ( \"words_per_topic\" ) num_topics_min = inputs . get_value_data ( \"num_topics_min\" ) num_topics_max = inputs . get_value_data ( \"num_topics_max\" ) if num_topics_max is None : num_topics_max = num_topics_min compute_coherence = inputs . get_value_data ( \"compute_coherence\" ) id2word = corpora . Dictionary ( tokens ) corpus = [ id2word . doc2bow ( text ) for text in tokens ] # model = gensim.models.ldamulticore.LdaMulticore( # corpus, id2word=id2word, num_topics=num_topics, eval_every=None # ) models = {} model_tables = {} coherence = {} # multi_threaded = False # if not multi_threaded: for nt in range ( num_topics_min , num_topics_max + 1 ): model = self . create_model ( corpus = corpus , num_topics = nt , id2word = id2word ) models [ nt ] = model topic_print_model = model . print_topics ( num_words = words_per_topic ) # dbg(topic_print_model) # df = pd.DataFrame(topic_print_model, columns=[\"topic_id\", \"words\"]) # TODO: create table directly # result_table = Table.from_pandas(df) model_tables [ nt ] = topic_print_model if compute_coherence : coherence_result = self . compute_coherence ( model = model , corpus_model = tokens , id2word = id2word ) coherence [ nt ] = coherence_result # else: # def create_model(num_topics): # model = self.create_model(corpus=corpus, num_topics=num_topics, id2word=id2word) # topic_print_model = model.print_topics(num_words=30) # df = pd.DataFrame(topic_print_model, columns=[\"topic_id\", \"words\"]) # # TODO: create table directly # result_table = Table.from_pandas(df) # coherence_result = None # if compute_coherence: # coherence_result = self.compute_coherence(model=model, corpus_model=tokens, id2word=id2word) # return (num_topics, model, result_table, coherence_result) # # executor = ThreadPoolExecutor() # results: typing.Any = executor.map(create_model, range(num_topics_min, num_topics_max+1)) # executor.shutdown(wait=True) # for r in results: # models[r[0]] = r[1] # model_tables[r[0]] = r[2] # if compute_coherence: # coherence[r[0]] = r[3] # df_coherence = pd.DataFrame(coherence.keys(), columns=[\"Number of topics\"]) # df_coherence[\"Coherence\"] = coherence.values() if compute_coherence : coherence_table = self . assemble_coherence ( models_dict = models , words_per_topic = words_per_topic ) else : coherence_table = None outputs . set_values ( topic_models = model_tables , coherence_table = coherence_table , coherence_map = coherence , )","title":"Methods"},{"location":"reference/kiara_plugin/language_processing/language_processing/__init__/#kiara_plugin.language_processing.language_processing.lemmatize","text":"","title":"lemmatize"},{"location":"reference/kiara_plugin/language_processing/language_processing/__init__/#kiara_plugin.language_processing.language_processing.tokens","text":"","title":"tokens"},{"location":"reference/kiara_plugin/language_processing/language_processing/__init__/#kiara_plugin.language_processing.language_processing.tokens-classes","text":"","title":"Classes"},{"location":"reference/kiara_plugin/language_processing/language_processing/__init__/#kiara_plugin.language_processing.language_processing.tokens.RemoveStopwordsModule","text":"Remove stopwords from an array of token-lists. Source code in language_processing/language_processing/tokens.py class RemoveStopwordsModule ( KiaraModule ): \"\"\"Remove stopwords from an array of token-lists.\"\"\" _module_type_name = \"remove_stopwords.from.tokens_array\" def create_inputs_schema ( self , ) -> ValueSetSchema : # TODO: do something smart and check whether languages are already downloaded, if so, display selection in doc inputs : Dict [ str , Dict [ str , Any ]] = { \"tokens_array\" : { \"type\" : \"array\" , \"doc\" : \"An array of string lists (a list of tokens).\" , }, \"languages\" : { \"type\" : \"list\" , # \"doc\": f\"A list of language names to use default stopword lists for. Available: {', '.join(get_stopwords().fileids())}.\", \"doc\" : \"A list of language names to use default stopword lists for.\" , \"optional\" : True , }, \"additional_stopwords\" : { \"type\" : \"list\" , \"doc\" : \"A list of additional, custom stopwords.\" , \"optional\" : True , }, } return inputs def create_outputs_schema ( self , ) -> ValueSetSchema : outputs = { \"token_list\" : { \"type\" : \"array\" , \"doc\" : \"An array of string lists, with the stopwords removed.\" , } } return outputs def process ( self , inputs : ValueMap , outputs : ValueMap ) -> None : import pyarrow as pa custom_stopwords = inputs . get_value_data ( \"additional_stopwords\" ) languages = inputs . get_value_data ( \"languages\" ) if isinstance ( languages , str ): languages = [ languages ] stopwords = set () if languages : for language in languages : if language not in get_stopwords () . fileids (): raise KiaraProcessingException ( f \"Invalid language: { language } . Available: { ', ' . join ( get_stopwords () . fileids ()) } .\" ) stopwords . update ( get_stopwords () . words ( language )) if custom_stopwords : stopwords . update ( custom_stopwords ) if not stopwords : outputs . set_value ( \"token_list\" , inputs . get_value_obj ( \"token_lists\" )) return token_lists = inputs . get_value_data ( \"token_lists\" ) if hasattr ( token_lists , \"to_pylist\" ): token_lists = token_lists . to_pylist () result = [] for token_list in token_lists : cleaned_list = [ x for x in token_list if x not in stopwords ] result . append ( cleaned_list ) outputs . set_value ( \"token_list\" , pa . array ( result ))","title":"RemoveStopwordsModule"},{"location":"reference/kiara_plugin/language_processing/language_processing/__init__/#kiara_plugin.language_processing.language_processing.tokens.RemoveStopwordsModule-methods","text":"create_inputs_schema ( self ) \u00b6 Return the schema for this types' inputs. Source code in language_processing/language_processing/tokens.py def create_inputs_schema ( self , ) -> ValueSetSchema : # TODO: do something smart and check whether languages are already downloaded, if so, display selection in doc inputs : Dict [ str , Dict [ str , Any ]] = { \"tokens_array\" : { \"type\" : \"array\" , \"doc\" : \"An array of string lists (a list of tokens).\" , }, \"languages\" : { \"type\" : \"list\" , # \"doc\": f\"A list of language names to use default stopword lists for. Available: {', '.join(get_stopwords().fileids())}.\", \"doc\" : \"A list of language names to use default stopword lists for.\" , \"optional\" : True , }, \"additional_stopwords\" : { \"type\" : \"list\" , \"doc\" : \"A list of additional, custom stopwords.\" , \"optional\" : True , }, } return inputs create_outputs_schema ( self ) \u00b6 Return the schema for this types' outputs. Source code in language_processing/language_processing/tokens.py def create_outputs_schema ( self , ) -> ValueSetSchema : outputs = { \"token_list\" : { \"type\" : \"array\" , \"doc\" : \"An array of string lists, with the stopwords removed.\" , } } return outputs process ( self , inputs , outputs ) \u00b6 Source code in language_processing/language_processing/tokens.py def process ( self , inputs : ValueMap , outputs : ValueMap ) -> None : import pyarrow as pa custom_stopwords = inputs . get_value_data ( \"additional_stopwords\" ) languages = inputs . get_value_data ( \"languages\" ) if isinstance ( languages , str ): languages = [ languages ] stopwords = set () if languages : for language in languages : if language not in get_stopwords () . fileids (): raise KiaraProcessingException ( f \"Invalid language: { language } . Available: { ', ' . join ( get_stopwords () . fileids ()) } .\" ) stopwords . update ( get_stopwords () . words ( language )) if custom_stopwords : stopwords . update ( custom_stopwords ) if not stopwords : outputs . set_value ( \"token_list\" , inputs . get_value_obj ( \"token_lists\" )) return token_lists = inputs . get_value_data ( \"token_lists\" ) if hasattr ( token_lists , \"to_pylist\" ): token_lists = token_lists . to_pylist () result = [] for token_list in token_lists : cleaned_list = [ x for x in token_list if x not in stopwords ] result . append ( cleaned_list ) outputs . set_value ( \"token_list\" , pa . array ( result ))","title":"Methods"},{"location":"reference/kiara_plugin/language_processing/language_processing/__init__/#kiara_plugin.language_processing.language_processing.tokens.TokenizTextArrayeModule","text":"Split sentences into words or words into characters. In other words, this operation establishes the word boundaries (i.e., tokens) a very helpful way of finding patterns. It is also the typical step prior to stemming and lemmatization Source code in language_processing/language_processing/tokens.py class TokenizTextArrayeModule ( KiaraModule ): \"\"\"Split sentences into words or words into characters. In other words, this operation establishes the word boundaries (i.e., tokens) a very helpful way of finding patterns. It is also the typical step prior to stemming and lemmatization \"\"\" _module_type_name = \"tokenize.texts_array\" KIARA_METADATA = { \"tags\" : [ \"tokenize\" , \"tokens\" ], } def create_inputs_schema ( self , ) -> ValueSetSchema : return { \"texts_array\" : { \"type\" : \"array\" , \"doc\" : \"An array of text items to be tokenized.\" , }, \"tokenize_by_word\" : { \"type\" : \"boolean\" , \"doc\" : \"Whether to tokenize by word (default), or character.\" , \"default\" : True , }, } def create_outputs_schema ( self , ) -> ValueSetSchema : return { \"tokens_array\" : { \"type\" : \"array\" , \"doc\" : \"The tokenized content, as an array of lists of strings.\" , } } def process ( self , inputs : ValueMap , outputs : ValueMap ): import warnings import nltk import numpy as np import pyarrow as pa import vaex array : KiaraArray = inputs . get_value_data ( \"texts_array\" ) # tokenize_by_word: bool = inputs.get_value_data(\"tokenize_by_word\") column : pa . Array = array . arrow_array warnings . filterwarnings ( \"ignore\" , category = np . VisibleDeprecationWarning ) def word_tokenize ( word ): result = nltk . word_tokenize ( word ) return result df = vaex . from_arrays ( column = column ) tokenized = df . apply ( word_tokenize , arguments = [ df . column ]) result_array = tokenized . to_arrow ( convert_to_native = True ) # TODO: remove this cast once the array data type can handle non-chunked arrays chunked = pa . chunked_array ( result_array ) outputs . set_values ( tokens_array = chunked ) # pandas_series: Series = column.to_pandas() # # tokenized = pandas_series.apply(lambda x: nltk.word_tokenize(x)) # # result_array = pa.Array.from_pandas(tokenized) # # outputs.set_values(tokens_array=result_array) KIARA_METADATA \u00b6","title":"TokenizTextArrayeModule"},{"location":"reference/kiara_plugin/language_processing/language_processing/__init__/#kiara_plugin.language_processing.language_processing.tokens.TokenizTextArrayeModule-methods","text":"create_inputs_schema ( self ) \u00b6 Return the schema for this types' inputs. Source code in language_processing/language_processing/tokens.py def create_inputs_schema ( self , ) -> ValueSetSchema : return { \"texts_array\" : { \"type\" : \"array\" , \"doc\" : \"An array of text items to be tokenized.\" , }, \"tokenize_by_word\" : { \"type\" : \"boolean\" , \"doc\" : \"Whether to tokenize by word (default), or character.\" , \"default\" : True , }, } create_outputs_schema ( self ) \u00b6 Return the schema for this types' outputs. Source code in language_processing/language_processing/tokens.py def create_outputs_schema ( self , ) -> ValueSetSchema : return { \"tokens_array\" : { \"type\" : \"array\" , \"doc\" : \"The tokenized content, as an array of lists of strings.\" , } } process ( self , inputs , outputs ) \u00b6 Source code in language_processing/language_processing/tokens.py def process ( self , inputs : ValueMap , outputs : ValueMap ): import warnings import nltk import numpy as np import pyarrow as pa import vaex array : KiaraArray = inputs . get_value_data ( \"texts_array\" ) # tokenize_by_word: bool = inputs.get_value_data(\"tokenize_by_word\") column : pa . Array = array . arrow_array warnings . filterwarnings ( \"ignore\" , category = np . VisibleDeprecationWarning ) def word_tokenize ( word ): result = nltk . word_tokenize ( word ) return result df = vaex . from_arrays ( column = column ) tokenized = df . apply ( word_tokenize , arguments = [ df . column ]) result_array = tokenized . to_arrow ( convert_to_native = True ) # TODO: remove this cast once the array data type can handle non-chunked arrays chunked = pa . chunked_array ( result_array ) outputs . set_values ( tokens_array = chunked ) # pandas_series: Series = column.to_pandas() # # tokenized = pandas_series.apply(lambda x: nltk.word_tokenize(x)) # # result_array = pa.Array.from_pandas(tokenized) # # outputs.set_values(tokens_array=result_array)","title":"Methods"},{"location":"reference/kiara_plugin/language_processing/language_processing/__init__/#kiara_plugin.language_processing.language_processing.tokens.TokenizeTextConfig","text":"Source code in language_processing/language_processing/tokens.py class TokenizeTextConfig ( KiaraModuleConfig ): filter_non_alpha : bool = Field ( description = \"Whether to filter out non alpha tokens.\" , default = True ) min_token_length : int = Field ( description = \"The minimum token length.\" , default = 3 ) to_lowercase : bool = Field ( description = \"Whether to lowercase the tokens.\" , default = True )","title":"TokenizeTextConfig"},{"location":"reference/kiara_plugin/language_processing/language_processing/__init__/#kiara_plugin.language_processing.language_processing.tokens.TokenizeTextConfig-attributes","text":"filter_non_alpha : bool pydantic-field \u00b6 Whether to filter out non alpha tokens. min_token_length : int pydantic-field \u00b6 The minimum token length. to_lowercase : bool pydantic-field \u00b6 Whether to lowercase the tokens.","title":"Attributes"},{"location":"reference/kiara_plugin/language_processing/language_processing/__init__/#kiara_plugin.language_processing.language_processing.tokens.TokenizeTextModule","text":"Tokenize a string. Source code in language_processing/language_processing/tokens.py class TokenizeTextModule ( KiaraModule ): \"\"\"Tokenize a string.\"\"\" _config_cls = TokenizeTextConfig _module_type_name = \"tokenize.string\" def create_inputs_schema ( self , ) -> ValueSetSchema : inputs = { \"text\" : { \"type\" : \"string\" , \"doc\" : \"The text to tokenize.\" }} return inputs def create_outputs_schema ( self , ) -> ValueSetSchema : outputs = { \"token_list\" : { \"type\" : \"list\" , \"doc\" : \"The tokenized version of the input text.\" , } } return outputs def process ( self , inputs : ValueMap , outputs : ValueMap ) -> None : import nltk # TODO: module-independent caching? # language = inputs.get_value_data(\"language\") # text = inputs . get_value_data ( \"text\" ) tokenized = nltk . word_tokenize ( text ) result = tokenized if self . get_config_value ( \"min_token_length\" ) > 0 : result = ( x for x in tokenized if len ( x ) >= self . get_config_value ( \"min_token_length\" ) ) if self . get_config_value ( \"filter_non_alpha\" ): result = ( x for x in result if x . isalpha ()) if self . get_config_value ( \"to_lowercase\" ): result = ( x . lower () for x in result ) outputs . set_value ( \"token_list\" , list ( result ))","title":"TokenizeTextModule"},{"location":"reference/kiara_plugin/language_processing/language_processing/__init__/#kiara_plugin.language_processing.language_processing.tokens.TokenizeTextModule-classes","text":"_config_cls ( KiaraModuleConfig ) private pydantic-model \u00b6 Source code in language_processing/language_processing/tokens.py class TokenizeTextConfig ( KiaraModuleConfig ): filter_non_alpha : bool = Field ( description = \"Whether to filter out non alpha tokens.\" , default = True ) min_token_length : int = Field ( description = \"The minimum token length.\" , default = 3 ) to_lowercase : bool = Field ( description = \"Whether to lowercase the tokens.\" , default = True ) Attributes \u00b6 filter_non_alpha : bool pydantic-field \u00b6 Whether to filter out non alpha tokens. min_token_length : int pydantic-field \u00b6 The minimum token length. to_lowercase : bool pydantic-field \u00b6 Whether to lowercase the tokens.","title":"Classes"},{"location":"reference/kiara_plugin/language_processing/language_processing/__init__/#kiara_plugin.language_processing.language_processing.tokens.TokenizeTextModule-methods","text":"create_inputs_schema ( self ) \u00b6 Return the schema for this types' inputs. Source code in language_processing/language_processing/tokens.py def create_inputs_schema ( self , ) -> ValueSetSchema : inputs = { \"text\" : { \"type\" : \"string\" , \"doc\" : \"The text to tokenize.\" }} return inputs create_outputs_schema ( self ) \u00b6 Return the schema for this types' outputs. Source code in language_processing/language_processing/tokens.py def create_outputs_schema ( self , ) -> ValueSetSchema : outputs = { \"token_list\" : { \"type\" : \"list\" , \"doc\" : \"The tokenized version of the input text.\" , } } return outputs process ( self , inputs , outputs ) \u00b6 Source code in language_processing/language_processing/tokens.py def process ( self , inputs : ValueMap , outputs : ValueMap ) -> None : import nltk # TODO: module-independent caching? # language = inputs.get_value_data(\"language\") # text = inputs . get_value_data ( \"text\" ) tokenized = nltk . word_tokenize ( text ) result = tokenized if self . get_config_value ( \"min_token_length\" ) > 0 : result = ( x for x in tokenized if len ( x ) >= self . get_config_value ( \"min_token_length\" ) ) if self . get_config_value ( \"filter_non_alpha\" ): result = ( x for x in result if x . isalpha ()) if self . get_config_value ( \"to_lowercase\" ): result = ( x . lower () for x in result ) outputs . set_value ( \"token_list\" , list ( result ))","title":"Methods"},{"location":"reference/kiara_plugin/language_processing/language_processing/__init__/#kiara_plugin.language_processing.language_processing.tokens.get_stopwords","text":"Source code in language_processing/language_processing/tokens.py def get_stopwords (): # TODO: make that smarter pass import nltk nltk . download ( \"punkt\" ) nltk . download ( \"stopwords\" ) from nltk.corpus import stopwords return stopwords","title":"get_stopwords()"},{"location":"reference/kiara_plugin/language_processing/language_processing/lda/","text":"Classes \u00b6 LDAModule ( KiaraModule ) \u00b6 Perform Latent Dirichlet Allocation on a tokenized corpus. This module computes models for a range of number of topics provided by the user. Source code in language_processing/language_processing/lda.py class LDAModule ( KiaraModule ): \"\"\"Perform Latent Dirichlet Allocation on a tokenized corpus. This module computes models for a range of number of topics provided by the user. \"\"\" _module_type_name = \"generate.LDA.for.tokens_array\" KIARA_METADATA = { \"tags\" : [ \"LDA\" , \"tokens\" ], } def create_inputs_schema ( self , ) -> ValueSetSchema : inputs : Dict [ str , Dict [ str , Any ]] = { \"tokens_array\" : { \"type\" : \"array\" , \"doc\" : \"The text corpus.\" }, \"num_topics_min\" : { \"type\" : \"integer\" , \"doc\" : \"The minimal number of topics.\" , \"default\" : 7 , }, \"num_topics_max\" : { \"type\" : \"integer\" , \"doc\" : \"The max number of topics.\" , \"optional\" : True , }, \"compute_coherence\" : { \"type\" : \"boolean\" , \"doc\" : \"Whether to compute the coherence score for each model.\" , \"default\" : False , }, \"words_per_topic\" : { \"type\" : \"integer\" , \"doc\" : \"How many words per topic to put in the result model.\" , \"default\" : 10 , }, } return inputs def create_outputs_schema ( self , ) -> ValueSetSchema : outputs = { \"topic_models\" : { \"type\" : \"dict\" , \"doc\" : \"A dictionary with one coherence model table for each number of topics.\" , }, \"coherence_table\" : { \"type\" : \"table\" , \"doc\" : \"Coherence details.\" , \"optional\" : True , }, \"coherence_map\" : { \"type\" : \"dict\" , \"doc\" : \"A map with the coherence value for every number of topics.\" , }, } return outputs def create_model ( self , corpus , num_topics : int , id2word : Mapping [ str , int ]): from gensim.models import LdaModel model = LdaModel ( corpus , id2word = id2word , num_topics = num_topics , eval_every = None ) return model def compute_coherence ( self , model , corpus_model , id2word : Mapping [ str , int ]): from gensim.models import CoherenceModel coherencemodel = CoherenceModel ( model = model , texts = corpus_model , dictionary = id2word , coherence = \"c_v\" , processes = 1 , ) coherence_value = coherencemodel . get_coherence () return coherence_value def assemble_coherence ( self , models_dict : Mapping [ int , Any ], words_per_topic : int ): import pandas as pd import pyarrow as pa # Create list with topics and topic words for each number of topics num_topics_list = [] topics_list = [] for ( num_topics , model , ) in models_dict . items (): num_topics_list . append ( num_topics ) topic_print = model . print_topics ( num_words = words_per_topic ) topics_list . append ( topic_print ) df_coherence_table = pd . DataFrame ( columns = [ \"topic_id\" , \"words\" , \"num_topics\" ]) idx = 0 for i in range ( len ( topics_list )): for j in range ( len ( topics_list [ i ])): df_coherence_table . loc [ idx ] = \"\" df_coherence_table [ \"topic_id\" ] . loc [ idx ] = j + 1 df_coherence_table [ \"words\" ] . loc [ idx ] = \", \" . join ( re . findall ( r '\"(\\w+)\"' , topics_list [ i ][ j ][ 1 ]) ) df_coherence_table [ \"num_topics\" ] . loc [ idx ] = num_topics_list [ i ] idx += 1 coherence_table = pa . Table . from_pandas ( df_coherence_table , preserve_index = False ) return coherence_table def process ( self , inputs : ValueMap , outputs : ValueMap ) -> None : from gensim import corpora logging . getLogger ( \"gensim\" ) . setLevel ( logging . ERROR ) tokens_array : KiaraArray = inputs . get_value_data ( \"tokens_array\" ) tokens = tokens_array . arrow_array . to_pylist () words_per_topic = inputs . get_value_data ( \"words_per_topic\" ) num_topics_min = inputs . get_value_data ( \"num_topics_min\" ) num_topics_max = inputs . get_value_data ( \"num_topics_max\" ) if num_topics_max is None : num_topics_max = num_topics_min compute_coherence = inputs . get_value_data ( \"compute_coherence\" ) id2word = corpora . Dictionary ( tokens ) corpus = [ id2word . doc2bow ( text ) for text in tokens ] # model = gensim.models.ldamulticore.LdaMulticore( # corpus, id2word=id2word, num_topics=num_topics, eval_every=None # ) models = {} model_tables = {} coherence = {} # multi_threaded = False # if not multi_threaded: for nt in range ( num_topics_min , num_topics_max + 1 ): model = self . create_model ( corpus = corpus , num_topics = nt , id2word = id2word ) models [ nt ] = model topic_print_model = model . print_topics ( num_words = words_per_topic ) # dbg(topic_print_model) # df = pd.DataFrame(topic_print_model, columns=[\"topic_id\", \"words\"]) # TODO: create table directly # result_table = Table.from_pandas(df) model_tables [ nt ] = topic_print_model if compute_coherence : coherence_result = self . compute_coherence ( model = model , corpus_model = tokens , id2word = id2word ) coherence [ nt ] = coherence_result # else: # def create_model(num_topics): # model = self.create_model(corpus=corpus, num_topics=num_topics, id2word=id2word) # topic_print_model = model.print_topics(num_words=30) # df = pd.DataFrame(topic_print_model, columns=[\"topic_id\", \"words\"]) # # TODO: create table directly # result_table = Table.from_pandas(df) # coherence_result = None # if compute_coherence: # coherence_result = self.compute_coherence(model=model, corpus_model=tokens, id2word=id2word) # return (num_topics, model, result_table, coherence_result) # # executor = ThreadPoolExecutor() # results: typing.Any = executor.map(create_model, range(num_topics_min, num_topics_max+1)) # executor.shutdown(wait=True) # for r in results: # models[r[0]] = r[1] # model_tables[r[0]] = r[2] # if compute_coherence: # coherence[r[0]] = r[3] # df_coherence = pd.DataFrame(coherence.keys(), columns=[\"Number of topics\"]) # df_coherence[\"Coherence\"] = coherence.values() if compute_coherence : coherence_table = self . assemble_coherence ( models_dict = models , words_per_topic = words_per_topic ) else : coherence_table = None outputs . set_values ( topic_models = model_tables , coherence_table = coherence_table , coherence_map = coherence , ) KIARA_METADATA \u00b6 Methods \u00b6 assemble_coherence ( self , models_dict , words_per_topic ) \u00b6 Source code in language_processing/language_processing/lda.py def assemble_coherence ( self , models_dict : Mapping [ int , Any ], words_per_topic : int ): import pandas as pd import pyarrow as pa # Create list with topics and topic words for each number of topics num_topics_list = [] topics_list = [] for ( num_topics , model , ) in models_dict . items (): num_topics_list . append ( num_topics ) topic_print = model . print_topics ( num_words = words_per_topic ) topics_list . append ( topic_print ) df_coherence_table = pd . DataFrame ( columns = [ \"topic_id\" , \"words\" , \"num_topics\" ]) idx = 0 for i in range ( len ( topics_list )): for j in range ( len ( topics_list [ i ])): df_coherence_table . loc [ idx ] = \"\" df_coherence_table [ \"topic_id\" ] . loc [ idx ] = j + 1 df_coherence_table [ \"words\" ] . loc [ idx ] = \", \" . join ( re . findall ( r '\"(\\w+)\"' , topics_list [ i ][ j ][ 1 ]) ) df_coherence_table [ \"num_topics\" ] . loc [ idx ] = num_topics_list [ i ] idx += 1 coherence_table = pa . Table . from_pandas ( df_coherence_table , preserve_index = False ) return coherence_table compute_coherence ( self , model , corpus_model , id2word ) \u00b6 Source code in language_processing/language_processing/lda.py def compute_coherence ( self , model , corpus_model , id2word : Mapping [ str , int ]): from gensim.models import CoherenceModel coherencemodel = CoherenceModel ( model = model , texts = corpus_model , dictionary = id2word , coherence = \"c_v\" , processes = 1 , ) coherence_value = coherencemodel . get_coherence () return coherence_value create_inputs_schema ( self ) \u00b6 Return the schema for this types' inputs. Source code in language_processing/language_processing/lda.py def create_inputs_schema ( self , ) -> ValueSetSchema : inputs : Dict [ str , Dict [ str , Any ]] = { \"tokens_array\" : { \"type\" : \"array\" , \"doc\" : \"The text corpus.\" }, \"num_topics_min\" : { \"type\" : \"integer\" , \"doc\" : \"The minimal number of topics.\" , \"default\" : 7 , }, \"num_topics_max\" : { \"type\" : \"integer\" , \"doc\" : \"The max number of topics.\" , \"optional\" : True , }, \"compute_coherence\" : { \"type\" : \"boolean\" , \"doc\" : \"Whether to compute the coherence score for each model.\" , \"default\" : False , }, \"words_per_topic\" : { \"type\" : \"integer\" , \"doc\" : \"How many words per topic to put in the result model.\" , \"default\" : 10 , }, } return inputs create_model ( self , corpus , num_topics , id2word ) \u00b6 Source code in language_processing/language_processing/lda.py def create_model ( self , corpus , num_topics : int , id2word : Mapping [ str , int ]): from gensim.models import LdaModel model = LdaModel ( corpus , id2word = id2word , num_topics = num_topics , eval_every = None ) return model create_outputs_schema ( self ) \u00b6 Return the schema for this types' outputs. Source code in language_processing/language_processing/lda.py def create_outputs_schema ( self , ) -> ValueSetSchema : outputs = { \"topic_models\" : { \"type\" : \"dict\" , \"doc\" : \"A dictionary with one coherence model table for each number of topics.\" , }, \"coherence_table\" : { \"type\" : \"table\" , \"doc\" : \"Coherence details.\" , \"optional\" : True , }, \"coherence_map\" : { \"type\" : \"dict\" , \"doc\" : \"A map with the coherence value for every number of topics.\" , }, } return outputs process ( self , inputs , outputs ) \u00b6 Source code in language_processing/language_processing/lda.py def process ( self , inputs : ValueMap , outputs : ValueMap ) -> None : from gensim import corpora logging . getLogger ( \"gensim\" ) . setLevel ( logging . ERROR ) tokens_array : KiaraArray = inputs . get_value_data ( \"tokens_array\" ) tokens = tokens_array . arrow_array . to_pylist () words_per_topic = inputs . get_value_data ( \"words_per_topic\" ) num_topics_min = inputs . get_value_data ( \"num_topics_min\" ) num_topics_max = inputs . get_value_data ( \"num_topics_max\" ) if num_topics_max is None : num_topics_max = num_topics_min compute_coherence = inputs . get_value_data ( \"compute_coherence\" ) id2word = corpora . Dictionary ( tokens ) corpus = [ id2word . doc2bow ( text ) for text in tokens ] # model = gensim.models.ldamulticore.LdaMulticore( # corpus, id2word=id2word, num_topics=num_topics, eval_every=None # ) models = {} model_tables = {} coherence = {} # multi_threaded = False # if not multi_threaded: for nt in range ( num_topics_min , num_topics_max + 1 ): model = self . create_model ( corpus = corpus , num_topics = nt , id2word = id2word ) models [ nt ] = model topic_print_model = model . print_topics ( num_words = words_per_topic ) # dbg(topic_print_model) # df = pd.DataFrame(topic_print_model, columns=[\"topic_id\", \"words\"]) # TODO: create table directly # result_table = Table.from_pandas(df) model_tables [ nt ] = topic_print_model if compute_coherence : coherence_result = self . compute_coherence ( model = model , corpus_model = tokens , id2word = id2word ) coherence [ nt ] = coherence_result # else: # def create_model(num_topics): # model = self.create_model(corpus=corpus, num_topics=num_topics, id2word=id2word) # topic_print_model = model.print_topics(num_words=30) # df = pd.DataFrame(topic_print_model, columns=[\"topic_id\", \"words\"]) # # TODO: create table directly # result_table = Table.from_pandas(df) # coherence_result = None # if compute_coherence: # coherence_result = self.compute_coherence(model=model, corpus_model=tokens, id2word=id2word) # return (num_topics, model, result_table, coherence_result) # # executor = ThreadPoolExecutor() # results: typing.Any = executor.map(create_model, range(num_topics_min, num_topics_max+1)) # executor.shutdown(wait=True) # for r in results: # models[r[0]] = r[1] # model_tables[r[0]] = r[2] # if compute_coherence: # coherence[r[0]] = r[3] # df_coherence = pd.DataFrame(coherence.keys(), columns=[\"Number of topics\"]) # df_coherence[\"Coherence\"] = coherence.values() if compute_coherence : coherence_table = self . assemble_coherence ( models_dict = models , words_per_topic = words_per_topic ) else : coherence_table = None outputs . set_values ( topic_models = model_tables , coherence_table = coherence_table , coherence_map = coherence , )","title":"lda"},{"location":"reference/kiara_plugin/language_processing/language_processing/lda/#kiara_plugin.language_processing.language_processing.lda-classes","text":"","title":"Classes"},{"location":"reference/kiara_plugin/language_processing/language_processing/lda/#kiara_plugin.language_processing.language_processing.lda.LDAModule","text":"Perform Latent Dirichlet Allocation on a tokenized corpus. This module computes models for a range of number of topics provided by the user. Source code in language_processing/language_processing/lda.py class LDAModule ( KiaraModule ): \"\"\"Perform Latent Dirichlet Allocation on a tokenized corpus. This module computes models for a range of number of topics provided by the user. \"\"\" _module_type_name = \"generate.LDA.for.tokens_array\" KIARA_METADATA = { \"tags\" : [ \"LDA\" , \"tokens\" ], } def create_inputs_schema ( self , ) -> ValueSetSchema : inputs : Dict [ str , Dict [ str , Any ]] = { \"tokens_array\" : { \"type\" : \"array\" , \"doc\" : \"The text corpus.\" }, \"num_topics_min\" : { \"type\" : \"integer\" , \"doc\" : \"The minimal number of topics.\" , \"default\" : 7 , }, \"num_topics_max\" : { \"type\" : \"integer\" , \"doc\" : \"The max number of topics.\" , \"optional\" : True , }, \"compute_coherence\" : { \"type\" : \"boolean\" , \"doc\" : \"Whether to compute the coherence score for each model.\" , \"default\" : False , }, \"words_per_topic\" : { \"type\" : \"integer\" , \"doc\" : \"How many words per topic to put in the result model.\" , \"default\" : 10 , }, } return inputs def create_outputs_schema ( self , ) -> ValueSetSchema : outputs = { \"topic_models\" : { \"type\" : \"dict\" , \"doc\" : \"A dictionary with one coherence model table for each number of topics.\" , }, \"coherence_table\" : { \"type\" : \"table\" , \"doc\" : \"Coherence details.\" , \"optional\" : True , }, \"coherence_map\" : { \"type\" : \"dict\" , \"doc\" : \"A map with the coherence value for every number of topics.\" , }, } return outputs def create_model ( self , corpus , num_topics : int , id2word : Mapping [ str , int ]): from gensim.models import LdaModel model = LdaModel ( corpus , id2word = id2word , num_topics = num_topics , eval_every = None ) return model def compute_coherence ( self , model , corpus_model , id2word : Mapping [ str , int ]): from gensim.models import CoherenceModel coherencemodel = CoherenceModel ( model = model , texts = corpus_model , dictionary = id2word , coherence = \"c_v\" , processes = 1 , ) coherence_value = coherencemodel . get_coherence () return coherence_value def assemble_coherence ( self , models_dict : Mapping [ int , Any ], words_per_topic : int ): import pandas as pd import pyarrow as pa # Create list with topics and topic words for each number of topics num_topics_list = [] topics_list = [] for ( num_topics , model , ) in models_dict . items (): num_topics_list . append ( num_topics ) topic_print = model . print_topics ( num_words = words_per_topic ) topics_list . append ( topic_print ) df_coherence_table = pd . DataFrame ( columns = [ \"topic_id\" , \"words\" , \"num_topics\" ]) idx = 0 for i in range ( len ( topics_list )): for j in range ( len ( topics_list [ i ])): df_coherence_table . loc [ idx ] = \"\" df_coherence_table [ \"topic_id\" ] . loc [ idx ] = j + 1 df_coherence_table [ \"words\" ] . loc [ idx ] = \", \" . join ( re . findall ( r '\"(\\w+)\"' , topics_list [ i ][ j ][ 1 ]) ) df_coherence_table [ \"num_topics\" ] . loc [ idx ] = num_topics_list [ i ] idx += 1 coherence_table = pa . Table . from_pandas ( df_coherence_table , preserve_index = False ) return coherence_table def process ( self , inputs : ValueMap , outputs : ValueMap ) -> None : from gensim import corpora logging . getLogger ( \"gensim\" ) . setLevel ( logging . ERROR ) tokens_array : KiaraArray = inputs . get_value_data ( \"tokens_array\" ) tokens = tokens_array . arrow_array . to_pylist () words_per_topic = inputs . get_value_data ( \"words_per_topic\" ) num_topics_min = inputs . get_value_data ( \"num_topics_min\" ) num_topics_max = inputs . get_value_data ( \"num_topics_max\" ) if num_topics_max is None : num_topics_max = num_topics_min compute_coherence = inputs . get_value_data ( \"compute_coherence\" ) id2word = corpora . Dictionary ( tokens ) corpus = [ id2word . doc2bow ( text ) for text in tokens ] # model = gensim.models.ldamulticore.LdaMulticore( # corpus, id2word=id2word, num_topics=num_topics, eval_every=None # ) models = {} model_tables = {} coherence = {} # multi_threaded = False # if not multi_threaded: for nt in range ( num_topics_min , num_topics_max + 1 ): model = self . create_model ( corpus = corpus , num_topics = nt , id2word = id2word ) models [ nt ] = model topic_print_model = model . print_topics ( num_words = words_per_topic ) # dbg(topic_print_model) # df = pd.DataFrame(topic_print_model, columns=[\"topic_id\", \"words\"]) # TODO: create table directly # result_table = Table.from_pandas(df) model_tables [ nt ] = topic_print_model if compute_coherence : coherence_result = self . compute_coherence ( model = model , corpus_model = tokens , id2word = id2word ) coherence [ nt ] = coherence_result # else: # def create_model(num_topics): # model = self.create_model(corpus=corpus, num_topics=num_topics, id2word=id2word) # topic_print_model = model.print_topics(num_words=30) # df = pd.DataFrame(topic_print_model, columns=[\"topic_id\", \"words\"]) # # TODO: create table directly # result_table = Table.from_pandas(df) # coherence_result = None # if compute_coherence: # coherence_result = self.compute_coherence(model=model, corpus_model=tokens, id2word=id2word) # return (num_topics, model, result_table, coherence_result) # # executor = ThreadPoolExecutor() # results: typing.Any = executor.map(create_model, range(num_topics_min, num_topics_max+1)) # executor.shutdown(wait=True) # for r in results: # models[r[0]] = r[1] # model_tables[r[0]] = r[2] # if compute_coherence: # coherence[r[0]] = r[3] # df_coherence = pd.DataFrame(coherence.keys(), columns=[\"Number of topics\"]) # df_coherence[\"Coherence\"] = coherence.values() if compute_coherence : coherence_table = self . assemble_coherence ( models_dict = models , words_per_topic = words_per_topic ) else : coherence_table = None outputs . set_values ( topic_models = model_tables , coherence_table = coherence_table , coherence_map = coherence , )","title":"LDAModule"},{"location":"reference/kiara_plugin/language_processing/language_processing/lda/#kiara_plugin.language_processing.language_processing.lda.LDAModule.KIARA_METADATA","text":"","title":"KIARA_METADATA"},{"location":"reference/kiara_plugin/language_processing/language_processing/lda/#kiara_plugin.language_processing.language_processing.lda.LDAModule-methods","text":"","title":"Methods"},{"location":"reference/kiara_plugin/language_processing/language_processing/lda/#kiara_plugin.language_processing.language_processing.lda.LDAModule.assemble_coherence","text":"Source code in language_processing/language_processing/lda.py def assemble_coherence ( self , models_dict : Mapping [ int , Any ], words_per_topic : int ): import pandas as pd import pyarrow as pa # Create list with topics and topic words for each number of topics num_topics_list = [] topics_list = [] for ( num_topics , model , ) in models_dict . items (): num_topics_list . append ( num_topics ) topic_print = model . print_topics ( num_words = words_per_topic ) topics_list . append ( topic_print ) df_coherence_table = pd . DataFrame ( columns = [ \"topic_id\" , \"words\" , \"num_topics\" ]) idx = 0 for i in range ( len ( topics_list )): for j in range ( len ( topics_list [ i ])): df_coherence_table . loc [ idx ] = \"\" df_coherence_table [ \"topic_id\" ] . loc [ idx ] = j + 1 df_coherence_table [ \"words\" ] . loc [ idx ] = \", \" . join ( re . findall ( r '\"(\\w+)\"' , topics_list [ i ][ j ][ 1 ]) ) df_coherence_table [ \"num_topics\" ] . loc [ idx ] = num_topics_list [ i ] idx += 1 coherence_table = pa . Table . from_pandas ( df_coherence_table , preserve_index = False ) return coherence_table","title":"assemble_coherence()"},{"location":"reference/kiara_plugin/language_processing/language_processing/lda/#kiara_plugin.language_processing.language_processing.lda.LDAModule.compute_coherence","text":"Source code in language_processing/language_processing/lda.py def compute_coherence ( self , model , corpus_model , id2word : Mapping [ str , int ]): from gensim.models import CoherenceModel coherencemodel = CoherenceModel ( model = model , texts = corpus_model , dictionary = id2word , coherence = \"c_v\" , processes = 1 , ) coherence_value = coherencemodel . get_coherence () return coherence_value","title":"compute_coherence()"},{"location":"reference/kiara_plugin/language_processing/language_processing/lda/#kiara_plugin.language_processing.language_processing.lda.LDAModule.create_inputs_schema","text":"Return the schema for this types' inputs. Source code in language_processing/language_processing/lda.py def create_inputs_schema ( self , ) -> ValueSetSchema : inputs : Dict [ str , Dict [ str , Any ]] = { \"tokens_array\" : { \"type\" : \"array\" , \"doc\" : \"The text corpus.\" }, \"num_topics_min\" : { \"type\" : \"integer\" , \"doc\" : \"The minimal number of topics.\" , \"default\" : 7 , }, \"num_topics_max\" : { \"type\" : \"integer\" , \"doc\" : \"The max number of topics.\" , \"optional\" : True , }, \"compute_coherence\" : { \"type\" : \"boolean\" , \"doc\" : \"Whether to compute the coherence score for each model.\" , \"default\" : False , }, \"words_per_topic\" : { \"type\" : \"integer\" , \"doc\" : \"How many words per topic to put in the result model.\" , \"default\" : 10 , }, } return inputs","title":"create_inputs_schema()"},{"location":"reference/kiara_plugin/language_processing/language_processing/lda/#kiara_plugin.language_processing.language_processing.lda.LDAModule.create_model","text":"Source code in language_processing/language_processing/lda.py def create_model ( self , corpus , num_topics : int , id2word : Mapping [ str , int ]): from gensim.models import LdaModel model = LdaModel ( corpus , id2word = id2word , num_topics = num_topics , eval_every = None ) return model","title":"create_model()"},{"location":"reference/kiara_plugin/language_processing/language_processing/lda/#kiara_plugin.language_processing.language_processing.lda.LDAModule.create_outputs_schema","text":"Return the schema for this types' outputs. Source code in language_processing/language_processing/lda.py def create_outputs_schema ( self , ) -> ValueSetSchema : outputs = { \"topic_models\" : { \"type\" : \"dict\" , \"doc\" : \"A dictionary with one coherence model table for each number of topics.\" , }, \"coherence_table\" : { \"type\" : \"table\" , \"doc\" : \"Coherence details.\" , \"optional\" : True , }, \"coherence_map\" : { \"type\" : \"dict\" , \"doc\" : \"A map with the coherence value for every number of topics.\" , }, } return outputs","title":"create_outputs_schema()"},{"location":"reference/kiara_plugin/language_processing/language_processing/lda/#kiara_plugin.language_processing.language_processing.lda.LDAModule.process","text":"Source code in language_processing/language_processing/lda.py def process ( self , inputs : ValueMap , outputs : ValueMap ) -> None : from gensim import corpora logging . getLogger ( \"gensim\" ) . setLevel ( logging . ERROR ) tokens_array : KiaraArray = inputs . get_value_data ( \"tokens_array\" ) tokens = tokens_array . arrow_array . to_pylist () words_per_topic = inputs . get_value_data ( \"words_per_topic\" ) num_topics_min = inputs . get_value_data ( \"num_topics_min\" ) num_topics_max = inputs . get_value_data ( \"num_topics_max\" ) if num_topics_max is None : num_topics_max = num_topics_min compute_coherence = inputs . get_value_data ( \"compute_coherence\" ) id2word = corpora . Dictionary ( tokens ) corpus = [ id2word . doc2bow ( text ) for text in tokens ] # model = gensim.models.ldamulticore.LdaMulticore( # corpus, id2word=id2word, num_topics=num_topics, eval_every=None # ) models = {} model_tables = {} coherence = {} # multi_threaded = False # if not multi_threaded: for nt in range ( num_topics_min , num_topics_max + 1 ): model = self . create_model ( corpus = corpus , num_topics = nt , id2word = id2word ) models [ nt ] = model topic_print_model = model . print_topics ( num_words = words_per_topic ) # dbg(topic_print_model) # df = pd.DataFrame(topic_print_model, columns=[\"topic_id\", \"words\"]) # TODO: create table directly # result_table = Table.from_pandas(df) model_tables [ nt ] = topic_print_model if compute_coherence : coherence_result = self . compute_coherence ( model = model , corpus_model = tokens , id2word = id2word ) coherence [ nt ] = coherence_result # else: # def create_model(num_topics): # model = self.create_model(corpus=corpus, num_topics=num_topics, id2word=id2word) # topic_print_model = model.print_topics(num_words=30) # df = pd.DataFrame(topic_print_model, columns=[\"topic_id\", \"words\"]) # # TODO: create table directly # result_table = Table.from_pandas(df) # coherence_result = None # if compute_coherence: # coherence_result = self.compute_coherence(model=model, corpus_model=tokens, id2word=id2word) # return (num_topics, model, result_table, coherence_result) # # executor = ThreadPoolExecutor() # results: typing.Any = executor.map(create_model, range(num_topics_min, num_topics_max+1)) # executor.shutdown(wait=True) # for r in results: # models[r[0]] = r[1] # model_tables[r[0]] = r[2] # if compute_coherence: # coherence[r[0]] = r[3] # df_coherence = pd.DataFrame(coherence.keys(), columns=[\"Number of topics\"]) # df_coherence[\"Coherence\"] = coherence.values() if compute_coherence : coherence_table = self . assemble_coherence ( models_dict = models , words_per_topic = words_per_topic ) else : coherence_table = None outputs . set_values ( topic_models = model_tables , coherence_table = coherence_table , coherence_map = coherence , )","title":"process()"},{"location":"reference/kiara_plugin/language_processing/language_processing/lemmatize/","text":"","title":"lemmatize"},{"location":"reference/kiara_plugin/language_processing/language_processing/tokens/","text":"Classes \u00b6 RemoveStopwordsModule ( KiaraModule ) \u00b6 Remove stopwords from an array of token-lists. Source code in language_processing/language_processing/tokens.py class RemoveStopwordsModule ( KiaraModule ): \"\"\"Remove stopwords from an array of token-lists.\"\"\" _module_type_name = \"remove_stopwords.from.tokens_array\" def create_inputs_schema ( self , ) -> ValueSetSchema : # TODO: do something smart and check whether languages are already downloaded, if so, display selection in doc inputs : Dict [ str , Dict [ str , Any ]] = { \"tokens_array\" : { \"type\" : \"array\" , \"doc\" : \"An array of string lists (a list of tokens).\" , }, \"languages\" : { \"type\" : \"list\" , # \"doc\": f\"A list of language names to use default stopword lists for. Available: {', '.join(get_stopwords().fileids())}.\", \"doc\" : \"A list of language names to use default stopword lists for.\" , \"optional\" : True , }, \"additional_stopwords\" : { \"type\" : \"list\" , \"doc\" : \"A list of additional, custom stopwords.\" , \"optional\" : True , }, } return inputs def create_outputs_schema ( self , ) -> ValueSetSchema : outputs = { \"token_list\" : { \"type\" : \"array\" , \"doc\" : \"An array of string lists, with the stopwords removed.\" , } } return outputs def process ( self , inputs : ValueMap , outputs : ValueMap ) -> None : import pyarrow as pa custom_stopwords = inputs . get_value_data ( \"additional_stopwords\" ) languages = inputs . get_value_data ( \"languages\" ) if isinstance ( languages , str ): languages = [ languages ] stopwords = set () if languages : for language in languages : if language not in get_stopwords () . fileids (): raise KiaraProcessingException ( f \"Invalid language: { language } . Available: { ', ' . join ( get_stopwords () . fileids ()) } .\" ) stopwords . update ( get_stopwords () . words ( language )) if custom_stopwords : stopwords . update ( custom_stopwords ) if not stopwords : outputs . set_value ( \"token_list\" , inputs . get_value_obj ( \"token_lists\" )) return token_lists = inputs . get_value_data ( \"token_lists\" ) if hasattr ( token_lists , \"to_pylist\" ): token_lists = token_lists . to_pylist () result = [] for token_list in token_lists : cleaned_list = [ x for x in token_list if x not in stopwords ] result . append ( cleaned_list ) outputs . set_value ( \"token_list\" , pa . array ( result )) Methods \u00b6 create_inputs_schema ( self ) \u00b6 Return the schema for this types' inputs. Source code in language_processing/language_processing/tokens.py def create_inputs_schema ( self , ) -> ValueSetSchema : # TODO: do something smart and check whether languages are already downloaded, if so, display selection in doc inputs : Dict [ str , Dict [ str , Any ]] = { \"tokens_array\" : { \"type\" : \"array\" , \"doc\" : \"An array of string lists (a list of tokens).\" , }, \"languages\" : { \"type\" : \"list\" , # \"doc\": f\"A list of language names to use default stopword lists for. Available: {', '.join(get_stopwords().fileids())}.\", \"doc\" : \"A list of language names to use default stopword lists for.\" , \"optional\" : True , }, \"additional_stopwords\" : { \"type\" : \"list\" , \"doc\" : \"A list of additional, custom stopwords.\" , \"optional\" : True , }, } return inputs create_outputs_schema ( self ) \u00b6 Return the schema for this types' outputs. Source code in language_processing/language_processing/tokens.py def create_outputs_schema ( self , ) -> ValueSetSchema : outputs = { \"token_list\" : { \"type\" : \"array\" , \"doc\" : \"An array of string lists, with the stopwords removed.\" , } } return outputs process ( self , inputs , outputs ) \u00b6 Source code in language_processing/language_processing/tokens.py def process ( self , inputs : ValueMap , outputs : ValueMap ) -> None : import pyarrow as pa custom_stopwords = inputs . get_value_data ( \"additional_stopwords\" ) languages = inputs . get_value_data ( \"languages\" ) if isinstance ( languages , str ): languages = [ languages ] stopwords = set () if languages : for language in languages : if language not in get_stopwords () . fileids (): raise KiaraProcessingException ( f \"Invalid language: { language } . Available: { ', ' . join ( get_stopwords () . fileids ()) } .\" ) stopwords . update ( get_stopwords () . words ( language )) if custom_stopwords : stopwords . update ( custom_stopwords ) if not stopwords : outputs . set_value ( \"token_list\" , inputs . get_value_obj ( \"token_lists\" )) return token_lists = inputs . get_value_data ( \"token_lists\" ) if hasattr ( token_lists , \"to_pylist\" ): token_lists = token_lists . to_pylist () result = [] for token_list in token_lists : cleaned_list = [ x for x in token_list if x not in stopwords ] result . append ( cleaned_list ) outputs . set_value ( \"token_list\" , pa . array ( result )) TokenizTextArrayeModule ( KiaraModule ) \u00b6 Split sentences into words or words into characters. In other words, this operation establishes the word boundaries (i.e., tokens) a very helpful way of finding patterns. It is also the typical step prior to stemming and lemmatization Source code in language_processing/language_processing/tokens.py class TokenizTextArrayeModule ( KiaraModule ): \"\"\"Split sentences into words or words into characters. In other words, this operation establishes the word boundaries (i.e., tokens) a very helpful way of finding patterns. It is also the typical step prior to stemming and lemmatization \"\"\" _module_type_name = \"tokenize.texts_array\" KIARA_METADATA = { \"tags\" : [ \"tokenize\" , \"tokens\" ], } def create_inputs_schema ( self , ) -> ValueSetSchema : return { \"texts_array\" : { \"type\" : \"array\" , \"doc\" : \"An array of text items to be tokenized.\" , }, \"tokenize_by_word\" : { \"type\" : \"boolean\" , \"doc\" : \"Whether to tokenize by word (default), or character.\" , \"default\" : True , }, } def create_outputs_schema ( self , ) -> ValueSetSchema : return { \"tokens_array\" : { \"type\" : \"array\" , \"doc\" : \"The tokenized content, as an array of lists of strings.\" , } } def process ( self , inputs : ValueMap , outputs : ValueMap ): import warnings import nltk import numpy as np import pyarrow as pa import vaex array : KiaraArray = inputs . get_value_data ( \"texts_array\" ) # tokenize_by_word: bool = inputs.get_value_data(\"tokenize_by_word\") column : pa . Array = array . arrow_array warnings . filterwarnings ( \"ignore\" , category = np . VisibleDeprecationWarning ) def word_tokenize ( word ): result = nltk . word_tokenize ( word ) return result df = vaex . from_arrays ( column = column ) tokenized = df . apply ( word_tokenize , arguments = [ df . column ]) result_array = tokenized . to_arrow ( convert_to_native = True ) # TODO: remove this cast once the array data type can handle non-chunked arrays chunked = pa . chunked_array ( result_array ) outputs . set_values ( tokens_array = chunked ) # pandas_series: Series = column.to_pandas() # # tokenized = pandas_series.apply(lambda x: nltk.word_tokenize(x)) # # result_array = pa.Array.from_pandas(tokenized) # # outputs.set_values(tokens_array=result_array) KIARA_METADATA \u00b6 Methods \u00b6 create_inputs_schema ( self ) \u00b6 Return the schema for this types' inputs. Source code in language_processing/language_processing/tokens.py def create_inputs_schema ( self , ) -> ValueSetSchema : return { \"texts_array\" : { \"type\" : \"array\" , \"doc\" : \"An array of text items to be tokenized.\" , }, \"tokenize_by_word\" : { \"type\" : \"boolean\" , \"doc\" : \"Whether to tokenize by word (default), or character.\" , \"default\" : True , }, } create_outputs_schema ( self ) \u00b6 Return the schema for this types' outputs. Source code in language_processing/language_processing/tokens.py def create_outputs_schema ( self , ) -> ValueSetSchema : return { \"tokens_array\" : { \"type\" : \"array\" , \"doc\" : \"The tokenized content, as an array of lists of strings.\" , } } process ( self , inputs , outputs ) \u00b6 Source code in language_processing/language_processing/tokens.py def process ( self , inputs : ValueMap , outputs : ValueMap ): import warnings import nltk import numpy as np import pyarrow as pa import vaex array : KiaraArray = inputs . get_value_data ( \"texts_array\" ) # tokenize_by_word: bool = inputs.get_value_data(\"tokenize_by_word\") column : pa . Array = array . arrow_array warnings . filterwarnings ( \"ignore\" , category = np . VisibleDeprecationWarning ) def word_tokenize ( word ): result = nltk . word_tokenize ( word ) return result df = vaex . from_arrays ( column = column ) tokenized = df . apply ( word_tokenize , arguments = [ df . column ]) result_array = tokenized . to_arrow ( convert_to_native = True ) # TODO: remove this cast once the array data type can handle non-chunked arrays chunked = pa . chunked_array ( result_array ) outputs . set_values ( tokens_array = chunked ) # pandas_series: Series = column.to_pandas() # # tokenized = pandas_series.apply(lambda x: nltk.word_tokenize(x)) # # result_array = pa.Array.from_pandas(tokenized) # # outputs.set_values(tokens_array=result_array) TokenizeTextConfig ( KiaraModuleConfig ) pydantic-model \u00b6 Source code in language_processing/language_processing/tokens.py class TokenizeTextConfig ( KiaraModuleConfig ): filter_non_alpha : bool = Field ( description = \"Whether to filter out non alpha tokens.\" , default = True ) min_token_length : int = Field ( description = \"The minimum token length.\" , default = 3 ) to_lowercase : bool = Field ( description = \"Whether to lowercase the tokens.\" , default = True ) Attributes \u00b6 filter_non_alpha : bool pydantic-field \u00b6 Whether to filter out non alpha tokens. min_token_length : int pydantic-field \u00b6 The minimum token length. to_lowercase : bool pydantic-field \u00b6 Whether to lowercase the tokens. TokenizeTextModule ( KiaraModule ) \u00b6 Tokenize a string. Source code in language_processing/language_processing/tokens.py class TokenizeTextModule ( KiaraModule ): \"\"\"Tokenize a string.\"\"\" _config_cls = TokenizeTextConfig _module_type_name = \"tokenize.string\" def create_inputs_schema ( self , ) -> ValueSetSchema : inputs = { \"text\" : { \"type\" : \"string\" , \"doc\" : \"The text to tokenize.\" }} return inputs def create_outputs_schema ( self , ) -> ValueSetSchema : outputs = { \"token_list\" : { \"type\" : \"list\" , \"doc\" : \"The tokenized version of the input text.\" , } } return outputs def process ( self , inputs : ValueMap , outputs : ValueMap ) -> None : import nltk # TODO: module-independent caching? # language = inputs.get_value_data(\"language\") # text = inputs . get_value_data ( \"text\" ) tokenized = nltk . word_tokenize ( text ) result = tokenized if self . get_config_value ( \"min_token_length\" ) > 0 : result = ( x for x in tokenized if len ( x ) >= self . get_config_value ( \"min_token_length\" ) ) if self . get_config_value ( \"filter_non_alpha\" ): result = ( x for x in result if x . isalpha ()) if self . get_config_value ( \"to_lowercase\" ): result = ( x . lower () for x in result ) outputs . set_value ( \"token_list\" , list ( result )) Classes \u00b6 _config_cls ( KiaraModuleConfig ) private pydantic-model \u00b6 Source code in language_processing/language_processing/tokens.py class TokenizeTextConfig ( KiaraModuleConfig ): filter_non_alpha : bool = Field ( description = \"Whether to filter out non alpha tokens.\" , default = True ) min_token_length : int = Field ( description = \"The minimum token length.\" , default = 3 ) to_lowercase : bool = Field ( description = \"Whether to lowercase the tokens.\" , default = True ) Attributes \u00b6 filter_non_alpha : bool pydantic-field \u00b6 Whether to filter out non alpha tokens. min_token_length : int pydantic-field \u00b6 The minimum token length. to_lowercase : bool pydantic-field \u00b6 Whether to lowercase the tokens. Methods \u00b6 create_inputs_schema ( self ) \u00b6 Return the schema for this types' inputs. Source code in language_processing/language_processing/tokens.py def create_inputs_schema ( self , ) -> ValueSetSchema : inputs = { \"text\" : { \"type\" : \"string\" , \"doc\" : \"The text to tokenize.\" }} return inputs create_outputs_schema ( self ) \u00b6 Return the schema for this types' outputs. Source code in language_processing/language_processing/tokens.py def create_outputs_schema ( self , ) -> ValueSetSchema : outputs = { \"token_list\" : { \"type\" : \"list\" , \"doc\" : \"The tokenized version of the input text.\" , } } return outputs process ( self , inputs , outputs ) \u00b6 Source code in language_processing/language_processing/tokens.py def process ( self , inputs : ValueMap , outputs : ValueMap ) -> None : import nltk # TODO: module-independent caching? # language = inputs.get_value_data(\"language\") # text = inputs . get_value_data ( \"text\" ) tokenized = nltk . word_tokenize ( text ) result = tokenized if self . get_config_value ( \"min_token_length\" ) > 0 : result = ( x for x in tokenized if len ( x ) >= self . get_config_value ( \"min_token_length\" ) ) if self . get_config_value ( \"filter_non_alpha\" ): result = ( x for x in result if x . isalpha ()) if self . get_config_value ( \"to_lowercase\" ): result = ( x . lower () for x in result ) outputs . set_value ( \"token_list\" , list ( result )) get_stopwords () \u00b6 Source code in language_processing/language_processing/tokens.py def get_stopwords (): # TODO: make that smarter pass import nltk nltk . download ( \"punkt\" ) nltk . download ( \"stopwords\" ) from nltk.corpus import stopwords return stopwords","title":"tokens"},{"location":"reference/kiara_plugin/language_processing/language_processing/tokens/#kiara_plugin.language_processing.language_processing.tokens-classes","text":"","title":"Classes"},{"location":"reference/kiara_plugin/language_processing/language_processing/tokens/#kiara_plugin.language_processing.language_processing.tokens.RemoveStopwordsModule","text":"Remove stopwords from an array of token-lists. Source code in language_processing/language_processing/tokens.py class RemoveStopwordsModule ( KiaraModule ): \"\"\"Remove stopwords from an array of token-lists.\"\"\" _module_type_name = \"remove_stopwords.from.tokens_array\" def create_inputs_schema ( self , ) -> ValueSetSchema : # TODO: do something smart and check whether languages are already downloaded, if so, display selection in doc inputs : Dict [ str , Dict [ str , Any ]] = { \"tokens_array\" : { \"type\" : \"array\" , \"doc\" : \"An array of string lists (a list of tokens).\" , }, \"languages\" : { \"type\" : \"list\" , # \"doc\": f\"A list of language names to use default stopword lists for. Available: {', '.join(get_stopwords().fileids())}.\", \"doc\" : \"A list of language names to use default stopword lists for.\" , \"optional\" : True , }, \"additional_stopwords\" : { \"type\" : \"list\" , \"doc\" : \"A list of additional, custom stopwords.\" , \"optional\" : True , }, } return inputs def create_outputs_schema ( self , ) -> ValueSetSchema : outputs = { \"token_list\" : { \"type\" : \"array\" , \"doc\" : \"An array of string lists, with the stopwords removed.\" , } } return outputs def process ( self , inputs : ValueMap , outputs : ValueMap ) -> None : import pyarrow as pa custom_stopwords = inputs . get_value_data ( \"additional_stopwords\" ) languages = inputs . get_value_data ( \"languages\" ) if isinstance ( languages , str ): languages = [ languages ] stopwords = set () if languages : for language in languages : if language not in get_stopwords () . fileids (): raise KiaraProcessingException ( f \"Invalid language: { language } . Available: { ', ' . join ( get_stopwords () . fileids ()) } .\" ) stopwords . update ( get_stopwords () . words ( language )) if custom_stopwords : stopwords . update ( custom_stopwords ) if not stopwords : outputs . set_value ( \"token_list\" , inputs . get_value_obj ( \"token_lists\" )) return token_lists = inputs . get_value_data ( \"token_lists\" ) if hasattr ( token_lists , \"to_pylist\" ): token_lists = token_lists . to_pylist () result = [] for token_list in token_lists : cleaned_list = [ x for x in token_list if x not in stopwords ] result . append ( cleaned_list ) outputs . set_value ( \"token_list\" , pa . array ( result ))","title":"RemoveStopwordsModule"},{"location":"reference/kiara_plugin/language_processing/language_processing/tokens/#kiara_plugin.language_processing.language_processing.tokens.RemoveStopwordsModule-methods","text":"","title":"Methods"},{"location":"reference/kiara_plugin/language_processing/language_processing/tokens/#kiara_plugin.language_processing.language_processing.tokens.RemoveStopwordsModule.create_inputs_schema","text":"Return the schema for this types' inputs. Source code in language_processing/language_processing/tokens.py def create_inputs_schema ( self , ) -> ValueSetSchema : # TODO: do something smart and check whether languages are already downloaded, if so, display selection in doc inputs : Dict [ str , Dict [ str , Any ]] = { \"tokens_array\" : { \"type\" : \"array\" , \"doc\" : \"An array of string lists (a list of tokens).\" , }, \"languages\" : { \"type\" : \"list\" , # \"doc\": f\"A list of language names to use default stopword lists for. Available: {', '.join(get_stopwords().fileids())}.\", \"doc\" : \"A list of language names to use default stopword lists for.\" , \"optional\" : True , }, \"additional_stopwords\" : { \"type\" : \"list\" , \"doc\" : \"A list of additional, custom stopwords.\" , \"optional\" : True , }, } return inputs","title":"create_inputs_schema()"},{"location":"reference/kiara_plugin/language_processing/language_processing/tokens/#kiara_plugin.language_processing.language_processing.tokens.RemoveStopwordsModule.create_outputs_schema","text":"Return the schema for this types' outputs. Source code in language_processing/language_processing/tokens.py def create_outputs_schema ( self , ) -> ValueSetSchema : outputs = { \"token_list\" : { \"type\" : \"array\" , \"doc\" : \"An array of string lists, with the stopwords removed.\" , } } return outputs","title":"create_outputs_schema()"},{"location":"reference/kiara_plugin/language_processing/language_processing/tokens/#kiara_plugin.language_processing.language_processing.tokens.RemoveStopwordsModule.process","text":"Source code in language_processing/language_processing/tokens.py def process ( self , inputs : ValueMap , outputs : ValueMap ) -> None : import pyarrow as pa custom_stopwords = inputs . get_value_data ( \"additional_stopwords\" ) languages = inputs . get_value_data ( \"languages\" ) if isinstance ( languages , str ): languages = [ languages ] stopwords = set () if languages : for language in languages : if language not in get_stopwords () . fileids (): raise KiaraProcessingException ( f \"Invalid language: { language } . Available: { ', ' . join ( get_stopwords () . fileids ()) } .\" ) stopwords . update ( get_stopwords () . words ( language )) if custom_stopwords : stopwords . update ( custom_stopwords ) if not stopwords : outputs . set_value ( \"token_list\" , inputs . get_value_obj ( \"token_lists\" )) return token_lists = inputs . get_value_data ( \"token_lists\" ) if hasattr ( token_lists , \"to_pylist\" ): token_lists = token_lists . to_pylist () result = [] for token_list in token_lists : cleaned_list = [ x for x in token_list if x not in stopwords ] result . append ( cleaned_list ) outputs . set_value ( \"token_list\" , pa . array ( result ))","title":"process()"},{"location":"reference/kiara_plugin/language_processing/language_processing/tokens/#kiara_plugin.language_processing.language_processing.tokens.TokenizTextArrayeModule","text":"Split sentences into words or words into characters. In other words, this operation establishes the word boundaries (i.e., tokens) a very helpful way of finding patterns. It is also the typical step prior to stemming and lemmatization Source code in language_processing/language_processing/tokens.py class TokenizTextArrayeModule ( KiaraModule ): \"\"\"Split sentences into words or words into characters. In other words, this operation establishes the word boundaries (i.e., tokens) a very helpful way of finding patterns. It is also the typical step prior to stemming and lemmatization \"\"\" _module_type_name = \"tokenize.texts_array\" KIARA_METADATA = { \"tags\" : [ \"tokenize\" , \"tokens\" ], } def create_inputs_schema ( self , ) -> ValueSetSchema : return { \"texts_array\" : { \"type\" : \"array\" , \"doc\" : \"An array of text items to be tokenized.\" , }, \"tokenize_by_word\" : { \"type\" : \"boolean\" , \"doc\" : \"Whether to tokenize by word (default), or character.\" , \"default\" : True , }, } def create_outputs_schema ( self , ) -> ValueSetSchema : return { \"tokens_array\" : { \"type\" : \"array\" , \"doc\" : \"The tokenized content, as an array of lists of strings.\" , } } def process ( self , inputs : ValueMap , outputs : ValueMap ): import warnings import nltk import numpy as np import pyarrow as pa import vaex array : KiaraArray = inputs . get_value_data ( \"texts_array\" ) # tokenize_by_word: bool = inputs.get_value_data(\"tokenize_by_word\") column : pa . Array = array . arrow_array warnings . filterwarnings ( \"ignore\" , category = np . VisibleDeprecationWarning ) def word_tokenize ( word ): result = nltk . word_tokenize ( word ) return result df = vaex . from_arrays ( column = column ) tokenized = df . apply ( word_tokenize , arguments = [ df . column ]) result_array = tokenized . to_arrow ( convert_to_native = True ) # TODO: remove this cast once the array data type can handle non-chunked arrays chunked = pa . chunked_array ( result_array ) outputs . set_values ( tokens_array = chunked ) # pandas_series: Series = column.to_pandas() # # tokenized = pandas_series.apply(lambda x: nltk.word_tokenize(x)) # # result_array = pa.Array.from_pandas(tokenized) # # outputs.set_values(tokens_array=result_array)","title":"TokenizTextArrayeModule"},{"location":"reference/kiara_plugin/language_processing/language_processing/tokens/#kiara_plugin.language_processing.language_processing.tokens.TokenizTextArrayeModule.KIARA_METADATA","text":"","title":"KIARA_METADATA"},{"location":"reference/kiara_plugin/language_processing/language_processing/tokens/#kiara_plugin.language_processing.language_processing.tokens.TokenizTextArrayeModule-methods","text":"","title":"Methods"},{"location":"reference/kiara_plugin/language_processing/language_processing/tokens/#kiara_plugin.language_processing.language_processing.tokens.TokenizTextArrayeModule.create_inputs_schema","text":"Return the schema for this types' inputs. Source code in language_processing/language_processing/tokens.py def create_inputs_schema ( self , ) -> ValueSetSchema : return { \"texts_array\" : { \"type\" : \"array\" , \"doc\" : \"An array of text items to be tokenized.\" , }, \"tokenize_by_word\" : { \"type\" : \"boolean\" , \"doc\" : \"Whether to tokenize by word (default), or character.\" , \"default\" : True , }, }","title":"create_inputs_schema()"},{"location":"reference/kiara_plugin/language_processing/language_processing/tokens/#kiara_plugin.language_processing.language_processing.tokens.TokenizTextArrayeModule.create_outputs_schema","text":"Return the schema for this types' outputs. Source code in language_processing/language_processing/tokens.py def create_outputs_schema ( self , ) -> ValueSetSchema : return { \"tokens_array\" : { \"type\" : \"array\" , \"doc\" : \"The tokenized content, as an array of lists of strings.\" , } }","title":"create_outputs_schema()"},{"location":"reference/kiara_plugin/language_processing/language_processing/tokens/#kiara_plugin.language_processing.language_processing.tokens.TokenizTextArrayeModule.process","text":"Source code in language_processing/language_processing/tokens.py def process ( self , inputs : ValueMap , outputs : ValueMap ): import warnings import nltk import numpy as np import pyarrow as pa import vaex array : KiaraArray = inputs . get_value_data ( \"texts_array\" ) # tokenize_by_word: bool = inputs.get_value_data(\"tokenize_by_word\") column : pa . Array = array . arrow_array warnings . filterwarnings ( \"ignore\" , category = np . VisibleDeprecationWarning ) def word_tokenize ( word ): result = nltk . word_tokenize ( word ) return result df = vaex . from_arrays ( column = column ) tokenized = df . apply ( word_tokenize , arguments = [ df . column ]) result_array = tokenized . to_arrow ( convert_to_native = True ) # TODO: remove this cast once the array data type can handle non-chunked arrays chunked = pa . chunked_array ( result_array ) outputs . set_values ( tokens_array = chunked ) # pandas_series: Series = column.to_pandas() # # tokenized = pandas_series.apply(lambda x: nltk.word_tokenize(x)) # # result_array = pa.Array.from_pandas(tokenized) # # outputs.set_values(tokens_array=result_array)","title":"process()"},{"location":"reference/kiara_plugin/language_processing/language_processing/tokens/#kiara_plugin.language_processing.language_processing.tokens.TokenizeTextConfig","text":"Source code in language_processing/language_processing/tokens.py class TokenizeTextConfig ( KiaraModuleConfig ): filter_non_alpha : bool = Field ( description = \"Whether to filter out non alpha tokens.\" , default = True ) min_token_length : int = Field ( description = \"The minimum token length.\" , default = 3 ) to_lowercase : bool = Field ( description = \"Whether to lowercase the tokens.\" , default = True )","title":"TokenizeTextConfig"},{"location":"reference/kiara_plugin/language_processing/language_processing/tokens/#kiara_plugin.language_processing.language_processing.tokens.TokenizeTextConfig-attributes","text":"","title":"Attributes"},{"location":"reference/kiara_plugin/language_processing/language_processing/tokens/#kiara_plugin.language_processing.language_processing.tokens.TokenizeTextConfig.filter_non_alpha","text":"Whether to filter out non alpha tokens.","title":"filter_non_alpha"},{"location":"reference/kiara_plugin/language_processing/language_processing/tokens/#kiara_plugin.language_processing.language_processing.tokens.TokenizeTextConfig.min_token_length","text":"The minimum token length.","title":"min_token_length"},{"location":"reference/kiara_plugin/language_processing/language_processing/tokens/#kiara_plugin.language_processing.language_processing.tokens.TokenizeTextConfig.to_lowercase","text":"Whether to lowercase the tokens.","title":"to_lowercase"},{"location":"reference/kiara_plugin/language_processing/language_processing/tokens/#kiara_plugin.language_processing.language_processing.tokens.TokenizeTextModule","text":"Tokenize a string. Source code in language_processing/language_processing/tokens.py class TokenizeTextModule ( KiaraModule ): \"\"\"Tokenize a string.\"\"\" _config_cls = TokenizeTextConfig _module_type_name = \"tokenize.string\" def create_inputs_schema ( self , ) -> ValueSetSchema : inputs = { \"text\" : { \"type\" : \"string\" , \"doc\" : \"The text to tokenize.\" }} return inputs def create_outputs_schema ( self , ) -> ValueSetSchema : outputs = { \"token_list\" : { \"type\" : \"list\" , \"doc\" : \"The tokenized version of the input text.\" , } } return outputs def process ( self , inputs : ValueMap , outputs : ValueMap ) -> None : import nltk # TODO: module-independent caching? # language = inputs.get_value_data(\"language\") # text = inputs . get_value_data ( \"text\" ) tokenized = nltk . word_tokenize ( text ) result = tokenized if self . get_config_value ( \"min_token_length\" ) > 0 : result = ( x for x in tokenized if len ( x ) >= self . get_config_value ( \"min_token_length\" ) ) if self . get_config_value ( \"filter_non_alpha\" ): result = ( x for x in result if x . isalpha ()) if self . get_config_value ( \"to_lowercase\" ): result = ( x . lower () for x in result ) outputs . set_value ( \"token_list\" , list ( result ))","title":"TokenizeTextModule"},{"location":"reference/kiara_plugin/language_processing/language_processing/tokens/#kiara_plugin.language_processing.language_processing.tokens.TokenizeTextModule-classes","text":"","title":"Classes"},{"location":"reference/kiara_plugin/language_processing/language_processing/tokens/#kiara_plugin.language_processing.language_processing.tokens.TokenizeTextModule._config_cls","text":"Source code in language_processing/language_processing/tokens.py class TokenizeTextConfig ( KiaraModuleConfig ): filter_non_alpha : bool = Field ( description = \"Whether to filter out non alpha tokens.\" , default = True ) min_token_length : int = Field ( description = \"The minimum token length.\" , default = 3 ) to_lowercase : bool = Field ( description = \"Whether to lowercase the tokens.\" , default = True )","title":"_config_cls"},{"location":"reference/kiara_plugin/language_processing/language_processing/tokens/#kiara_plugin.language_processing.language_processing.tokens.TokenizeTextModule._config_cls-attributes","text":"filter_non_alpha : bool pydantic-field \u00b6 Whether to filter out non alpha tokens. min_token_length : int pydantic-field \u00b6 The minimum token length. to_lowercase : bool pydantic-field \u00b6 Whether to lowercase the tokens.","title":"Attributes"},{"location":"reference/kiara_plugin/language_processing/language_processing/tokens/#kiara_plugin.language_processing.language_processing.tokens.TokenizeTextModule-methods","text":"","title":"Methods"},{"location":"reference/kiara_plugin/language_processing/language_processing/tokens/#kiara_plugin.language_processing.language_processing.tokens.TokenizeTextModule.create_inputs_schema","text":"Return the schema for this types' inputs. Source code in language_processing/language_processing/tokens.py def create_inputs_schema ( self , ) -> ValueSetSchema : inputs = { \"text\" : { \"type\" : \"string\" , \"doc\" : \"The text to tokenize.\" }} return inputs","title":"create_inputs_schema()"},{"location":"reference/kiara_plugin/language_processing/language_processing/tokens/#kiara_plugin.language_processing.language_processing.tokens.TokenizeTextModule.create_outputs_schema","text":"Return the schema for this types' outputs. Source code in language_processing/language_processing/tokens.py def create_outputs_schema ( self , ) -> ValueSetSchema : outputs = { \"token_list\" : { \"type\" : \"list\" , \"doc\" : \"The tokenized version of the input text.\" , } } return outputs","title":"create_outputs_schema()"},{"location":"reference/kiara_plugin/language_processing/language_processing/tokens/#kiara_plugin.language_processing.language_processing.tokens.TokenizeTextModule.process","text":"Source code in language_processing/language_processing/tokens.py def process ( self , inputs : ValueMap , outputs : ValueMap ) -> None : import nltk # TODO: module-independent caching? # language = inputs.get_value_data(\"language\") # text = inputs . get_value_data ( \"text\" ) tokenized = nltk . word_tokenize ( text ) result = tokenized if self . get_config_value ( \"min_token_length\" ) > 0 : result = ( x for x in tokenized if len ( x ) >= self . get_config_value ( \"min_token_length\" ) ) if self . get_config_value ( \"filter_non_alpha\" ): result = ( x for x in result if x . isalpha ()) if self . get_config_value ( \"to_lowercase\" ): result = ( x . lower () for x in result ) outputs . set_value ( \"token_list\" , list ( result ))","title":"process()"},{"location":"reference/kiara_plugin/language_processing/language_processing/tokens/#kiara_plugin.language_processing.language_processing.tokens.get_stopwords","text":"Source code in language_processing/language_processing/tokens.py def get_stopwords (): # TODO: make that smarter pass import nltk nltk . download ( \"punkt\" ) nltk . download ( \"stopwords\" ) from nltk.corpus import stopwords return stopwords","title":"get_stopwords()"},{"location":"reference/kiara_plugin/language_processing/pipelines/__init__/","text":"Default (empty) module that is used as a base path for pipelines contained in this package.","title":"pipelines"}]}